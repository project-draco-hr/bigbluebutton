{
  Object o=null;
  if (args == null || args.length == 0) {
    args=new Object[]{""};
  }
  String name=method.getName();
  if (log.isDebugEnabled()) {
    log.debug("Calling: " + name);
  }
  try {
    Method apiMethod=null;
    Invocable invocable=(Invocable)engine;
    if (null == instance) {
      o=invocable.invokeFunction(name,args);
    }
 else {
      try {
        o=invocable.invokeMethod(instance,name,args);
      }
 catch (      NoSuchMethodException nex) {
        log.debug("Method not found: " + name);
        try {
          o=invocable.invokeFunction(name,args);
        }
 catch (        Exception ex) {
          log.debug("Function not found: " + name);
          Class[] interfaces=(Class[])engine.get("interfaces");
          for (          Class clazz : interfaces) {
            o=invocable.getInterface(engine.get((String)engine.get("className")),clazz);
            if (null != o) {
              log.debug("Interface return type: " + o.getClass().getName());
              break;
            }
          }
        }
      }
    }
    if (log.isDebugEnabled()) {
      log.debug("Invocable result: " + o);
    }
  }
 catch (  NoSuchMethodException nex) {
    log.warn("Method not found");
  }
catch (  Throwable t) {
    log.warn("{}",t);
  }
  return o;
}

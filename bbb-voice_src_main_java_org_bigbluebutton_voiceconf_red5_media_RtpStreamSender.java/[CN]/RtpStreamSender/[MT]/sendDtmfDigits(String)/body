{
  byte[] dtmfbuf=new byte[transcoder.getOutgoingEncodedFrameSize() + RTP_HEADER_SIZE];
  RtpPacket dtmfpacket=new RtpPacket(dtmfbuf,0);
  dtmfpacket.setPayloadType(DTMF2833);
  dtmfpacket.setPayloadLength(transcoder.getOutgoingEncodedFrameSize());
  byte[] blankbuf=new byte[transcoder.getOutgoingEncodedFrameSize() + RTP_HEADER_SIZE];
  RtpPacket blankpacket=new RtpPacket(blankbuf,0);
  blankpacket.setPayloadType(transcoder.getCodecId());
  blankpacket.setPayloadLength(transcoder.getOutgoingEncodedFrameSize());
  for (int d=0; d < dtmfDigits.length(); d++) {
    char digit=dtmfDigits.charAt(d);
    if (digit == '*') {
      dtmfbuf[startPayloadPos]=10;
    }
 else     if (digit == '#') {
      dtmfbuf[startPayloadPos]=11;
    }
 else     if (digit >= 'A' && digit <= 'D') {
      dtmfbuf[startPayloadPos]=(byte)(digit - 53);
    }
 else {
      dtmfbuf[startPayloadPos]=(byte)(digit - 48);
    }
    dtmfbuf[startPayloadPos + 1]=0;
    dtmfbuf[startPayloadPos + 2]=1;
    dtmfbuf[startPayloadPos + 3]=-32;
    for (int r=0; r < 3; r++) {
      dtmfpacket.setSequenceNumber(sequenceNum++);
      dtmfpacket.setTimestamp(transcoder.getOutgoingEncodedFrameSize());
      doRtpDelay();
      rtpSocketSend(dtmfpacket);
    }
    dtmfbuf[startPayloadPos + 1]=-128;
    dtmfbuf[startPayloadPos + 2]=3;
    dtmfbuf[startPayloadPos + 3]=116;
    for (int r=0; r < 3; r++) {
      dtmfpacket.setSequenceNumber(sequenceNum++);
      dtmfpacket.setTimestamp(transcoder.getOutgoingEncodedFrameSize());
      doRtpDelay();
      rtpSocketSend(dtmfpacket);
    }
    for (int r=0; r < 200 / transcoder.getOutgoingPacketization(); r++) {
      blankpacket.setSequenceNumber(sequenceNum++);
      blankpacket.setTimestamp(transcoder.getOutgoingEncodedFrameSize());
      doRtpDelay();
      rtpSocketSend(blankpacket);
    }
  }
}

{
  log.debug("In getJnlpFileEx");
  String path=jnlpres.getPath();
  URL resource=jnlpres.getResource();
  long lastModified=jnlpres.getLastModified();
  log.debug("lastModified: " + lastModified + " "+ new Date(lastModified));
  if (lastModified == 0) {
    log.warn("servlet.log.warning.nolastmodified",path);
  }
  if (!hasConfigurator) {
    configurator=getConfigurator();
    if (configurator != null)     hasConfigurator=true;
  }
  String reqUrl=HttpUtils.getRequestURL(dreq.getHttpRequest()).toString();
  if (dreq.getQuery() != null)   reqUrl+=dreq.getQuery();
  long timeStamp=lastModified;
  String mimeType=_servletContext.getMimeType(path);
  if (mimeType == null)   mimeType=JNLP_MIME_TYPE;
  StringBuffer jnlpFileTemplate=new StringBuffer();
  URLConnection conn=resource.openConnection();
  BufferedReader br=new BufferedReader(new InputStreamReader(conn.getInputStream(),"UTF-8"));
  String line=br.readLine();
  if (line != null && line.startsWith("TS:")) {
    timeStamp=parseTimeStamp(line.substring(3));
    log.debug("Timestamp: " + timeStamp + " "+ new Date(timeStamp));
    if (timeStamp == 0) {
      log.warn("servlet.log.warning.notimestamp",path);
      timeStamp=lastModified;
    }
    line=br.readLine();
  }
  while (line != null) {
    jnlpFileTemplate.append(line);
    line=br.readLine();
  }
  String jnlpFileContent=specializeJnlpTemplate(dreq.getHttpRequest(),path,jnlpFileTemplate.toString());
  String query=dreq.getQuery();
  String testJRE=dreq.getTestJRE();
  log.debug("Double check query string: " + query);
  if (query != null) {
    byte[] cb=jnlpFileContent.getBytes("UTF-8");
    ByteArrayInputStream bis=new ByteArrayInputStream(cb);
    try {
      DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
      DocumentBuilder builder=factory.newDocumentBuilder();
      Document document=builder.parse(bis);
      if (document != null && document.getNodeType() == Node.DOCUMENT_NODE) {
        boolean modified=false;
        Element root=document.getDocumentElement();
        if (root.hasAttribute("href") && query != null) {
          String href=root.getAttribute("href");
          root.setAttribute("href",href + "?" + query);
          modified=true;
        }
        if (testJRE != null) {
          NodeList j2seNL=root.getElementsByTagName("j2se");
          if (j2seNL != null) {
            Element j2se=(Element)j2seNL.item(0);
            String ver=j2se.getAttribute("version");
            if (ver.length() > 0) {
              j2se.setAttribute("version",testJRE);
              modified=true;
            }
          }
        }
        TransformerFactory tFactory=TransformerFactory.newInstance();
        Transformer transformer=tFactory.newTransformer();
        DOMSource source=new DOMSource(document);
        StringWriter sw=new StringWriter();
        StreamResult result=new StreamResult(sw);
        transformer.transform(source,result);
        jnlpFileContent=sw.toString();
        log.debug("Converted jnlpFileContent: " + jnlpFileContent);
        if (modified) {
          timeStamp=new java.util.Date().getTime();
          log.debug("Last modified on the fly:  " + timeStamp);
        }
      }
    }
 catch (    Exception e) {
      log.debug(e.toString(),e);
    }
  }
  byte[] byteContent=jnlpFileContent.getBytes("UTF-8");
  DownloadResponse resp=DownloadResponse.getFileDownloadResponse(byteContent,mimeType,timeStamp,jnlpres.getReturnVersionId());
  return resp;
}

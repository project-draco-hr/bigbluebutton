{
  log.debug("In getJnlpFile");
  String path=jnlpres.getPath();
  URL resource=jnlpres.getResource();
  long lastModified=jnlpres.getLastModified();
  log.debug("lastModified: " + lastModified + " "+ new Date(lastModified));
  if (lastModified == 0) {
    log.warn("servlet.log.warning.nolastmodified",path);
  }
  String reqUrl=HttpUtils.getRequestURL(dreq.getHttpRequest()).toString();
  long timeStamp=new java.util.Date().getTime();
  ;
  String mimeType=_servletContext.getMimeType(path);
  if (mimeType == null)   mimeType=JNLP_MIME_TYPE;
  StringBuffer jnlpFileTemplate=new StringBuffer();
  URLConnection conn=resource.openConnection();
  BufferedReader br=new BufferedReader(new InputStreamReader(conn.getInputStream(),"UTF-8"));
  String line=br.readLine();
  if (line != null && line.startsWith("TS:")) {
    timeStamp=parseTimeStamp(line.substring(3));
    log.debug("Timestamp: " + timeStamp + " "+ new Date(timeStamp));
    if (timeStamp == 0) {
      log.warn("servlet.log.warning.notimestamp",path);
      timeStamp=lastModified;
    }
    line=br.readLine();
  }
  while (line != null) {
    jnlpFileTemplate.append(line);
    line=br.readLine();
  }
  if (!hasConfigurator) {
    configurator=getConfigurator();
    if (configurator != null)     hasConfigurator=true;
  }
  String jnlpFileContent=specializeJnlpTemplate(dreq.getHttpRequest(),path,jnlpFileTemplate.toString());
  byte[] byteContent=jnlpFileContent.getBytes("UTF-8");
  timeStamp=new java.util.Date().getTime();
  DownloadResponse resp=DownloadResponse.getFileDownloadResponse(byteContent,mimeType,timeStamp,jnlpres.getReturnVersionId());
  log.debug("JNLP: mime=[" + mimeType + "] timestamp=["+ timeStamp+ "] version=["+ jnlpres.getReturnVersionId()+ "]");
  return resp;
}

{
  printLog("inside onTransSuccessResponse(tc,msg)",LogLevel.LOW);
  if (tc.getTransactionMethod().equals(SipMethods.INVITE)) {
    if (!verifyStatus(statusIs(D_INVITING) || statusIs(D_ReINVITING)))     return;
    StatusLine statusline=msg.getStatusLine();
    int code=statusline.getCode();
    if (!verifyThat(code >= 200 && code < 300 && msg.getTransactionMethod().equals(SipMethods.INVITE),"2xx for invite was expected"))     return;
    boolean re_inviting=statusIs(D_ReINVITING);
    changeStatus(D_CALL);
    update(Dialog.UAC,msg);
    if (invite_offer) {
      ack_req=MessageFactory.create2xxAckRequest(this,null);
      AckTransactionClient ack_tc=new AckTransactionClient(sip_provider,ack_req,null);
      ack_tc.request();
    }
    if (!re_inviting) {
      listener.onDlgInviteSuccessResponse(this,code,statusline.getReason(),msg.getBody(),msg);
      listener.onDlgCall(this);
    }
 else     listener.onDlgReInviteSuccessResponse(this,code,statusline.getReason(),msg.getBody(),msg);
  }
 else   if (tc.getTransactionMethod().equals(SipMethods.BYE)) {
    if (!verifyStatus(statusIs(D_BYEING)))     return;
    StatusLine statusline=msg.getStatusLine();
    int code=statusline.getCode();
    verifyThat(code >= 200 && code < 300,"2xx for bye was expected");
    changeStatus(D_CLOSE);
    listener.onDlgByeSuccessResponse(this,code,statusline.getReason(),msg);
    listener.onDlgClose(this);
  }
}

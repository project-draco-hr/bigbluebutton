def main():
    meetingId = ''
    audioSrcDir = ''
    presentationSrcDir = ''
    archiveDir = ''
    redisHost = ''
    redisPort = 0
    ingestDir = ''
    publishDir = ''
    scriptsDir = ''
    playbackHost = ''
    try:
        (opts, args) = getopt.getopt(sys.argv[1:], 'hm:a:p:r:e:o:i:b:s:k:', ['help', 'meeting-id=', 'audio-dir=', 'presentation-dir=', 'archive-dir=', 'redis-host=', 'redis-port=', 'ingest-dir=', 'publish-dir=', 'scripts-dir=', 'playback-host='])
    except getopt.GetoptError as err:
        print str(err)
        usage()
        sys.exit(2)
    for (o, a) in opts:
        if (o in ('-h', '--help')):
            usage()
            sys.exit()
        elif (o in ('-m', '--meeting-id')):
            meetingId = a
        elif (o in ('-a', '--audio-dir')):
            audioSrcDir = a
        elif (o in ('-p', '--presentation-dir')):
            presentationSrcDir = a
        elif (o in ('-r', '--archive-dir')):
            archiveDir = a
        elif (o in ('-e', '--redis-host')):
            redisHost = a
        elif (o in ('-o', '--redis-port')):
            redisPort = a
        elif (o in ('-i', '--ingest-dir')):
            ingestDir = a
        elif (o in ('-b', '--publish-dir')):
            publishDir = a
        elif (o in ('-s', '--scripts-dir')):
            scriptsDir = a
        elif (o in ('-k', '--playback-host')):
            playbackHost = a
        else:
            assert False, 'unhandled option'
    printUsage = False
    if (meetingId == ''):
        print 'Missing meeting id.'
        printUsage = True
    if (audioSrcDir == ''):
        print 'Missing audio dir.'
        printUsage = True
    if (presentationSrcDir == ''):
        print 'Missing presentation dir.'
        printUsage = True
    if (archiveDir == ''):
        print 'Missing archive dir.'
        printUsage = True
    if (redisHost == ''):
        print 'Missing redis host.'
        printUsage = True
    if (redisPort == 0):
        print 'Missing redis port.'
        printUsage = True
    if (ingestDir == ''):
        print 'Missing ingest dir.'
        printUsage = True
    if (publishDir == ''):
        print 'Missing publish dir.'
        printUsage = True
    if (scriptsDir == ''):
        print 'Missing scripts dir.'
        printUsage = True
    if (playbackHost == ''):
        print 'Missing playback host.'
        printUsage = True
    if printUsage:
        printUsageHelp()
    command = ((((((((('python ' + scriptsDir) + '/archive.py -m ') + meetingId) + ' -a ') + audioSrcDir) + ' -p ') + presentationSrcDir) + ' -r ') + archiveDir)
    print command
    proc = subprocess.Popen(command, shell=True)
    proc.wait()
    command = ((((((((('python ' + scriptsDir) + '/get-events.py -m ') + meetingId) + ' -r ') + redisHost) + ' -p ') + redisPort) + ' -a ') + archiveDir)
    print command
    proc = subprocess.Popen(command, shell=True)
    proc.wait()
    command = ((((((('python ' + scriptsDir) + '/ingest.py -m ') + meetingId) + ' -i ') + ingestDir) + ' -a ') + archiveDir)
    print command
    proc = subprocess.Popen(command, shell=True)
    proc.wait()
    command = ((((('python ' + scriptsDir) + '/process-audio.py -m ') + meetingId) + ' -i ') + ingestDir)
    print command
    proc = subprocess.Popen(command, shell=True)
    proc.wait()
    meetingArchiveDir = ((ingestDir + '/') + meetingId)
    presentationNames = []
    tree = etree.parse((meetingArchiveDir + '/events.xml'))
    presentations = tree.xpath("//event[@name='SharePresentationEvent']")
    for p in presentations:
        pname = p.find('presentationName').text
        presentationNames.append(pname)
    command = (((('python ' + scriptsDir) + '/gen-slides.py -p ') + meetingArchiveDir) + '/presentations/')
    for p in presentationNames:
        genSlidesCmd = ((((command + p) + ' -f ') + p) + '.pdf')
        print genSlidesCmd
        proc = subprocess.Popen(genSlidesCmd, shell=True)
        proc.wait()
    command = ((((((((('python ' + scriptsDir) + '/publish.py -m ') + meetingId) + ' -i ') + ingestDir) + ' -p ') + publishDir) + ' -k ') + playbackHost)
    print command
    proc = subprocess.Popen(command, shell=True)
    proc.wait()

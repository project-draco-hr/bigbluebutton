{
  if (channel.equalsIgnoreCase(MessagingConstants.TO_PRESENTATION_CHANNEL)) {
    JsonParser parser=new JsonParser();
    JsonObject obj=(JsonObject)parser.parse(message);
    if (obj.has("header") && obj.has("payload")) {
      JsonObject header=(JsonObject)obj.get("header");
      if (header.has("name")) {
        String messageName=header.get("name").getAsString();
        if (SendConversionUpdate.SEND_CONVERSION_UPDATE.equals(messageName)) {
          SendConversionUpdate msg=SendConversionUpdate.fromJson(message);
          System.out.println("in messageHandler - sendConversionCompleted");
          bbbInGW.sendConversionUpdate(msg.messageKey,msg.meetingId,msg.code,msg.presId,msg.presName);
        }
 else         if (ResizeAndMoveSlide.RESIZE_AND_MOVE_SLIDE.equals(messageName)) {
          System.out.println("in messageHandler - resizeAndMoveSlide");
          ResizeAndMoveSlide msg=ResizeAndMoveSlide.fromJson(message);
          bbbInGW.resizeAndMoveSlide(msg.meetingId,msg.xOffset,msg.yOffset,msg.widthRatio,msg.heightRatio);
        }
 else         if (GetPresentationInfo.GET_PRESENTATION_INFO.equals(messageName)) {
          System.out.println("in messageHandler - getPresentationInfo");
          GetPresentationInfo msg=GetPresentationInfo.fromJson(message);
          bbbInGW.getPresentationInfo(msg.meetingId,msg.requesterId,msg.replyTo);
        }
 else         if (SendConversionCompleted.SEND_CONVERSION_COMPLETED.equals(messageName)) {
          System.out.println("in messageHandler - sendConversionCompleted");
          SendConversionCompleted msg=SendConversionCompleted.fromJson(message);
          bbbInGW.sendConversionCompleted(msg.messageKey,msg.meetingId,msg.code,msg.presId,msg.numPages,msg.presName,msg.presBaseUrl);
        }
 else         if (SendPageCountError.SEND_PAGE_COUNT_ERROR.equals(messageName)) {
          System.out.println("in messageHandler - sendPageCountError");
          SendPageCountError msg=SendPageCountError.fromJson(message);
          bbbInGW.sendPageCountError(msg.messageKey,msg.meetingId,msg.code,msg.presId,msg.numberOfPages,msg.maxNumberPages,msg.presName);
        }
 else         if (GoToSlide.GO_TO_SLIDE.equals(messageName)) {
          System.out.println("in messageHandler - goToSlide");
          GoToSlide msg=GoToSlide.fromJson(message);
          bbbInGW.gotoSlide(msg.meetingId,msg.page);
        }
 else         if (RemovePresentation.REMOVE_PRESENTATION.equals(messageName)) {
          System.out.println("in messageHandler - removePresentation");
          RemovePresentation msg=RemovePresentation.fromJson(message);
          bbbInGW.removePresentation(msg.meetingId,msg.presentationId);
        }
 else         if (SendCursorUpdate.SEND_CURSOR_UPDATE.equals(messageName)) {
          System.out.println("in messageHandler - sendCursorUpdate");
          SendCursorUpdate msg=SendCursorUpdate.fromJson(message);
          bbbInGW.sendCursorUpdate(msg.meetingId,msg.xPercent,msg.yPercent);
        }
 else         if (SharePresentation.SHARE_PRESENTATION.equals(messageName)) {
          System.out.println("in messageHandler - sharePresentation");
          SharePresentation msg=SharePresentation.fromJson(message);
          bbbInGW.sharePresentation(msg.meetingId,msg.presentationId,msg.share);
        }
 else         if (GetSlideInfo.GET_SLIDE_INFO.equals(messageName)) {
          System.out.println("in messageHandler - GetSlideInfo");
          GetSlideInfo msg=GetSlideInfo.fromJson(message);
          bbbInGW.getSlideInfo(msg.meetingId,msg.requesterId,msg.replyTo);
        }
 else         if (SendSlideGenerated.SEND_SLIDE_GENERATED.equals(messageName)) {
          System.out.println("in messageHandler - SendSlideGenerated");
          SendSlideGenerated msg=SendSlideGenerated.fromJson(message);
          bbbInGW.sendSlideGenerated(msg.messageKey,msg.meetingId,msg.code,msg.presId,msg.numberOfPages,msg.pagesCompleted,msg.presName);
        }
      }
    }
 else {
      Gson gson=new Gson();
      HashMap<String,String> map=gson.fromJson(message,new TypeToken<Map<String,String>>(){
      }
.getType());
      String code=(String)map.get("returnCode");
      String presId=(String)map.get("presentationId");
      String filename=(String)map.get("filename");
      String conference=(String)map.get("conference");
      String messageKey=(String)map.get("messageKey");
      if (messageKey.equalsIgnoreCase(OFFICE_DOC_CONVERSION_SUCCESS_KEY) || messageKey.equalsIgnoreCase(OFFICE_DOC_CONVERSION_FAILED_KEY) || messageKey.equalsIgnoreCase(SUPPORTED_DOCUMENT_KEY)|| messageKey.equalsIgnoreCase(UNSUPPORTED_DOCUMENT_KEY)|| messageKey.equalsIgnoreCase(GENERATING_THUMBNAIL_KEY)|| messageKey.equalsIgnoreCase(GENERATED_THUMBNAIL_KEY)|| messageKey.equalsIgnoreCase(PAGE_COUNT_FAILED_KEY)) {
        sendConversionUpdate(messageKey,conference,code,presId,filename);
      }
 else       if (messageKey.equalsIgnoreCase(PAGE_COUNT_EXCEEDED_KEY)) {
        Integer numberOfPages=new Integer((String)map.get("numberOfPages"));
        Integer maxNumberPages=new Integer((String)map.get("maxNumberPages"));
        sendPageCountError(messageKey,conference,code,presId,numberOfPages,maxNumberPages,filename);
      }
 else       if (messageKey.equalsIgnoreCase(GENERATED_SLIDE_KEY)) {
        Integer numberOfPages=new Integer((String)map.get("numberOfPages"));
        Integer pagesCompleted=new Integer((String)map.get("pagesCompleted"));
        sendSlideGenerated(messageKey,conference,code,presId,numberOfPages,pagesCompleted,filename);
      }
 else       if (messageKey.equalsIgnoreCase(CONVERSION_COMPLETED_KEY)) {
        Integer numberOfPages=new Integer((String)map.get("numberOfPages"));
        String presBaseUrl=(String)map.get("presentationBaseUrl");
        sendConversionCompleted(messageKey,conference,code,presId,numberOfPages,filename,presBaseUrl);
      }
    }
  }
}

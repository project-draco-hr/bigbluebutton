{
  super.streamBroadcastClose(stream);
  log.info("streamBroadcastStop " + stream.getPublishedName() + "]");
  String streamId=stream.getPublishedName();
  Matcher matcher=STREAM_ID_PATTERN.matcher(stream.getPublishedName());
  if (matcher.matches()) {
    String meetingId=matcher.group(1).trim();
    app.streamStopped(meetingId,streamId);
    boolean recordVideoStream=app.recordStream(meetingId,streamId);
    if (recordVideoStream) {
      IConnection conn=Red5.getConnectionLocal();
      String scopeName;
      if (conn != null) {
        scopeName=conn.getScope().getName();
      }
 else {
        log.info("Connection local was null, using scope name from the stream: {}",stream);
        scopeName=stream.getScope().getName();
      }
      IStreamListener listener=streamListeners.remove(scopeName + "-" + stream.getPublishedName());
      if (listener != null) {
        stream.removeStreamListener(listener);
      }
      String filename=recordingDirectory;
      if (!filename.endsWith("/")) {
        filename.concat("/");
      }
      filename=filename.concat(meetingId).concat("/").concat(stream.getPublishedName()).concat(".flv");
      long publishDuration=(System.currentTimeMillis() - stream.getCreationTime()) / 1000;
      log.info("streamBroadcastClose " + stream.getPublishedName() + " "+ System.currentTimeMillis()+ " "+ scopeName);
      Map<String,String> event=new HashMap<String,String>();
      event.put("module","Deskshare");
      event.put("timestamp",new Long(System.currentTimeMillis()).toString());
      event.put("meetingId",scopeName);
      event.put("stream",stream.getPublishedName());
      event.put("file",filename);
      event.put("duration",new Long(publishDuration).toString());
      event.put("eventName","DeskshareStoppedEvent");
      recordingService.record(scopeName,event);
    }
  }
 else {
    log.error("Invalid streamid format [{}]",streamId);
  }
}

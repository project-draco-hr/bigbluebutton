{
  Class<?> c=Loader.getEnclosingClass(cls);
  List<Class> classList=new ArrayList<Class>();
  classList.add(0,c);
  while (!c.isAnnotationPresent(org.bytedeco.javacpp.annotation.Properties.class) && !c.isAnnotationPresent(Platform.class) && c.getSuperclass() != null && c.getSuperclass() != Object.class) {
    classList.add(0,c=c.getSuperclass());
  }
  if (effectiveClasses == null) {
    effectiveClasses=classList;
  }
  org.bytedeco.javacpp.annotation.Properties classProperties=c.getAnnotation(org.bytedeco.javacpp.annotation.Properties.class);
  Platform[] platforms=null;
  if (classProperties == null) {
    Platform platform=c.getAnnotation(Platform.class);
    if (platform != null) {
      platforms=new Platform[]{platform};
    }
  }
 else {
    Class[] classes=classProperties.inherit();
    if (inherit && classes != null) {
      if (inheritedClasses == null) {
        inheritedClasses=new ArrayList<Class>();
      }
      for (      Class c2 : classes) {
        load(c2,inherit);
        if (!inheritedClasses.contains(c2)) {
          inheritedClasses.add(c2);
        }
      }
    }
    String target=classProperties.target();
    if (target.length() > 0) {
      addAll("target",target);
    }
    String helper=classProperties.helper();
    if (helper.length() > 0) {
      addAll("helper",helper);
    }
    String[] names=classProperties.names();
    if (names.length > 0) {
      defaultNames=names;
    }
    platforms=classProperties.value();
  }
  String[] pragma={}, define={}, include={}, cinclude={}, includepath={}, compiler={}, linkpath={}, link={}, frameworkpath={}, framework={}, preloadpath={}, preload={};
  String library="jni" + c.getSimpleName();
  for (  Platform p : platforms != null ? platforms : new Platform[0]) {
    String[][] names={p.value().length > 0 ? p.value() : defaultNames,p.not()};
    boolean[] matches={false,false};
    for (int i=0; i < names.length; i++) {
      for (      String s : names[i]) {
        if (platform.startsWith(s)) {
          matches[i]=true;
          break;
        }
      }
    }
    if ((names[0].length == 0 || matches[0]) && (names[1].length == 0 || !matches[1])) {
      if (p.pragma().length > 0) {
        pragma=p.pragma();
      }
      if (p.define().length > 0) {
        define=p.define();
      }
      if (p.include().length > 0) {
        include=p.include();
      }
      if (p.cinclude().length > 0) {
        cinclude=p.cinclude();
      }
      if (p.includepath().length > 0) {
        includepath=p.includepath();
      }
      if (p.compiler().length > 0) {
        compiler=p.compiler();
      }
      if (p.linkpath().length > 0) {
        linkpath=p.linkpath();
      }
      if (p.link().length > 0) {
        link=p.link();
      }
      if (p.frameworkpath().length > 0) {
        frameworkpath=p.frameworkpath();
      }
      if (p.framework().length > 0) {
        framework=p.framework();
      }
      if (p.preloadpath().length > 0) {
        preloadpath=p.preloadpath();
      }
      if (p.preload().length > 0) {
        preload=p.preload();
      }
      if (p.library().length() > 0) {
        library=p.library();
      }
    }
  }
  addAll("platform.pragma",pragma);
  addAll("platform.define",define);
  addAll("platform.include",include);
  addAll("platform.cinclude",cinclude);
  addAll("platform.includepath",includepath);
  addAll("platform.compiler.*",compiler);
  addAll("platform.linkpath",linkpath);
  addAll("platform.link",link);
  addAll("platform.frameworkpath",frameworkpath);
  addAll("platform.framework",framework);
  addAll("platform.preloadpath",preloadpath);
  addAll("platform.preload",preload);
  setProperty("platform.library",library);
  if (platforms != null && platforms.length > 0) {
    loaded=true;
  }
}

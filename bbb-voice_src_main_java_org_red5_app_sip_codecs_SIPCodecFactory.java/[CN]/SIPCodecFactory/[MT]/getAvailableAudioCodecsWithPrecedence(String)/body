{
  int initIndex=0;
  int finalIndex=codecsPrecedence.indexOf(";");
  String codecId;
  SIPCodec[] availableCodecs=new SIPCodec[availableAudioCodecsId.length];
  int codecsIndex=0;
  printLog("getAvailableAudioCodecsWithPrecedence","codecsPrecedence = [" + codecsPrecedence + "], initIndex =  ["+ initIndex+ "], finalIndex =  ["+ finalIndex+ "].");
  while (initIndex < finalIndex) {
    codecId=codecsPrecedence.substring(initIndex,finalIndex);
    printLog("getAvailableAudioCodecsWithPrecedence","codecId = [" + codecId + "].");
    SIPCodec sipCodec=getSIPAudioCodec(Integer.valueOf(codecId).intValue());
    if (sipCodec != null) {
      printLog("getAvailableAudioCodecsWithPrecedence","codecId = [" + sipCodec.getCodecId() + "], codecName =  ["+ sipCodec.getCodecName()+ "].");
      availableCodecs[codecsIndex]=sipCodec;
      codecsIndex++;
      initIndex=finalIndex + 1;
      finalIndex=codecsPrecedence.indexOf(";",initIndex);
      if ((finalIndex == -1) && (initIndex <= codecsPrecedence.length())) {
        finalIndex=codecsPrecedence.length();
      }
      printLog("getAvailableAudioCodecsWithPrecedence","codecsIndex = [" + codecsIndex + "], initIndex =  ["+ initIndex+ "], finalIndex =  ["+ finalIndex+ "].");
    }
 else {
      printLog("getAvailableAudioCodecsWithPrecedence","Problem with value [" + codecId + "] retrieved from ["+ codecsPrecedence+ "].");
    }
  }
  return availableCodecs;
}

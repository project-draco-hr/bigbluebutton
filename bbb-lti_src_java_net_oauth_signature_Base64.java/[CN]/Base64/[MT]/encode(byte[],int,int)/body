{
  if (eof) {
    return;
  }
  if (inAvail < 0) {
    eof=true;
    if (buf == null || buf.length - pos < encodeSize) {
      resizeBuf();
    }
switch (modulus) {
case 1:
      buf[pos++]=intToBase64[(x >> 2) & MASK_6BITS];
    buf[pos++]=intToBase64[(x << 4) & MASK_6BITS];
  buf[pos++]=PAD;
buf[pos++]=PAD;
break;
case 2:
buf[pos++]=intToBase64[(x >> 10) & MASK_6BITS];
buf[pos++]=intToBase64[(x >> 4) & MASK_6BITS];
buf[pos++]=intToBase64[(x << 2) & MASK_6BITS];
buf[pos++]=PAD;
break;
}
if (lineLength > 0) {
System.arraycopy(lineSeparator,0,buf,pos,lineSeparator.length);
pos+=lineSeparator.length;
}
}
 else {
for (int i=0; i < inAvail; i++) {
if (buf == null || buf.length - pos < encodeSize) {
resizeBuf();
}
modulus=(++modulus) % 3;
int b=in[inPos++];
if (b < 0) {
b+=256;
}
x=(x << 8) + b;
if (0 == modulus) {
buf[pos++]=intToBase64[(x >> 18) & MASK_6BITS];
buf[pos++]=intToBase64[(x >> 12) & MASK_6BITS];
buf[pos++]=intToBase64[(x >> 6) & MASK_6BITS];
buf[pos++]=intToBase64[x & MASK_6BITS];
currentLinePos+=4;
if (lineLength > 0 && lineLength <= currentLinePos) {
System.arraycopy(lineSeparator,0,buf,pos,lineSeparator.length);
pos+=lineSeparator.length;
currentLinePos=0;
}
}
}
}
}

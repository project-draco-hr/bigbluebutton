{
  expect(socketConnectionFacade.readLine()).andReturn("Event: RTCPReceived");
  expect(socketConnectionFacade.readLine()).andReturn("From 192.168.0.1:1234");
  expect(socketConnectionFacade.readLine()).andReturn("HighestSequence: 999");
  expect(socketConnectionFacade.readLine()).andReturn("");
  expect(socketConnectionFacade.readLine()).andReturn(null);
  replay(socketConnectionFacade);
  managerReader.setSocket(socketConnectionFacade);
  managerReader.run();
  verify(socketConnectionFacade);
  assertEquals("not exactly two events dispatched",2,dispatcher.dispatchedEvents.size());
  assertEquals("first event must be a RtcpReceivedEvent",RtcpReceivedEvent.class,dispatcher.dispatchedEvents.get(0).getClass());
  RtcpReceivedEvent rtcpReceivedEvent=(RtcpReceivedEvent)dispatcher.dispatchedEvents.get(0);
  assertEquals("Invalid from address on RtcpReceivedEvent","192.168.0.1",rtcpReceivedEvent.getFromAddress().getHostAddress());
  assertEquals("Invalid from port on RtcpReceivedEvent",new Integer(1234),rtcpReceivedEvent.getFromPort());
  assertEquals("Invalid highest sequence on RtcpReceivedEvent",new Long(999),rtcpReceivedEvent.getHighestSequence());
  assertEquals("second event must be a DisconnectEvent",DisconnectEvent.class,dispatcher.dispatchedEvents.get(1).getClass());
}

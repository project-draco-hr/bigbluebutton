{
  Long now=new Long(System.nanoTime() / 1000000);
  this.pakRecv.add(now);
  Long timePassed=(now - this.beginningValues.get("time"));
  this.count++;
  log.info("count: " + count + " sent: "+ sent+ " timePassed: "+ timePassed+ " latency: "+ latency);
  if (count == 1) {
    latency=Math.min(timePassed,800);
    latency=Math.max(latency,10);
    pakSent.add(now);
    sent++;
    log.info("Sending First Payload at " + now);
    this.callBWCheck(this.client.getAttribute("payload"));
  }
 else   if ((count > 1 && count < 3) && (timePassed < 1000)) {
    pakSent.add(now);
    sent++;
    cumLatency++;
    log.info("Sending Second Payload at " + now);
    this.callBWCheck(this.client.getAttribute("payload_1"));
  }
 else   if ((count >= 3 && count < 6) && (timePassed < 1000)) {
    pakSent.add(now);
    sent++;
    cumLatency++;
    log.info("Sending Third Payload at " + now);
    this.callBWCheck(this.client.getAttribute("payload_1"));
  }
 else   if (count >= 6 && (timePassed < 1000)) {
    pakSent.add(now);
    sent++;
    cumLatency++;
    log.info("Sending Fourth Payload at " + now);
    this.callBWCheck(this.client.getAttribute("payload_2"));
  }
 else   if (sent == count) {
    if (latency >= 100) {
      if (pakRecv.get(1) - pakRecv.get(0) > 1000) {
        latency=100;
      }
    }
    this.client.removeAttribute("payload");
    this.client.removeAttribute("payload_1");
    this.client.removeAttribute("payload_2");
    final IStreamCapableConnection endStats=this.getStats();
    deltaDown=(endStats.getWrittenBytes() - beginningValues.get("b_down")) * 8 / 1000;
    deltaTime=((now - beginningValues.get("time")) - (latency * cumLatency)) / 1000;
    if (Math.round(deltaTime) <= 0) {
      deltaTime=(now - beginningValues.get("time") + latency) / 1000;
    }
    kbitDown=Math.round(deltaDown / deltaTime);
    if (kbitDown < 100)     kbitDown=100;
    log.info("onBWDone: kbitDown = " + kbitDown + ", deltaDown= "+ deltaDown+ ", deltaTime = "+ deltaTime+ ", latency = "+ this.latency);
    this.callBWDone(this.kbitDown,this.deltaDown,this.deltaTime,this.latency);
  }
}

{
  if (audioData.length != NELLY_AUDIO_LENGTH) {
    log.warn("Receiving bad nelly audio. Expecting {}, got {}.",NELLY_AUDIO_LENGTH,audioData.length);
    return;
  }
  decoderMap=decoder.decode(decoderMap,audioData,0,tempL16Buffer,0);
  l16Audio.put(tempL16Buffer);
  viewBuffer.get(tempUlawBuffer);
  int encodedBytes=sipCodec.pcmToCodec(tempUlawBuffer,ulawEncodedBuffer);
  transcodedAudioListener.handleTranscodedAudioData(ulawEncodedBuffer,timestamp+=TS_INCREMENT);
  if (l16Audio.position() == l16Audio.capacity()) {
    viewBuffer.get(tempUlawBuffer);
    encodedBytes=sipCodec.pcmToCodec(tempUlawBuffer,ulawEncodedBuffer);
    if (encodedBytes == sipCodec.getOutgoingEncodedFrameSize()) {
      transcodedAudioListener.handleTranscodedAudioData(ulawEncodedBuffer,timestamp+=TS_INCREMENT);
    }
 else {
      log.error("Failure encoding buffer.");
    }
    viewBuffer.get(tempUlawBuffer);
    encodedBytes=sipCodec.pcmToCodec(tempUlawBuffer,ulawEncodedBuffer);
    if (encodedBytes == sipCodec.getOutgoingEncodedFrameSize()) {
      transcodedAudioListener.handleTranscodedAudioData(ulawEncodedBuffer,timestamp+=TS_INCREMENT);
    }
 else {
      log.error("Failure encoding buffer.");
    }
    viewBuffer.get(tempUlawBuffer);
    encodedBytes=sipCodec.pcmToCodec(tempUlawBuffer,ulawEncodedBuffer);
    if (encodedBytes == sipCodec.getOutgoingEncodedFrameSize()) {
      transcodedAudioListener.handleTranscodedAudioData(ulawEncodedBuffer,timestamp+=TS_INCREMENT);
    }
 else {
      log.error("Failure encoding buffer.");
    }
    l16Audio.clear();
    viewBuffer.clear();
  }
}

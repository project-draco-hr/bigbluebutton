{
  byte[] codedBuffer=new byte[160];
  decoderMap=decoder.decode(decoderMap,audioData,0,tempBuffer,0);
  nellyAudio.put(tempBuffer);
  ulawAudio.get(encodingBuffer);
  int encodedBytes=sipCodec.pcmToCodec(encodingBuffer,codedBuffer);
  if (encodedBytes == sipCodec.getOutgoingEncodedFrameSize()) {
    listener.handleTranscodedAudioData(codedBuffer,timestamp+=TS_INCREMENT);
  }
 else {
    log.error("Failure encoding buffer.");
  }
  if (nellyAudio.position() == nellyAudio.capacity()) {
    ulawAudio.get(encodingBuffer);
    encodedBytes=sipCodec.pcmToCodec(encodingBuffer,codedBuffer);
    if (encodedBytes == sipCodec.getOutgoingEncodedFrameSize()) {
      listener.handleTranscodedAudioData(codedBuffer,timestamp+=TS_INCREMENT);
    }
 else {
      log.error("Failure encoding buffer.");
    }
    ulawAudio.get(encodingBuffer);
    encodedBytes=sipCodec.pcmToCodec(encodingBuffer,codedBuffer);
    if (encodedBytes == sipCodec.getOutgoingEncodedFrameSize()) {
      listener.handleTranscodedAudioData(codedBuffer,timestamp+=TS_INCREMENT);
    }
 else {
      log.error("Failure encoding buffer.");
    }
    nellyAudio.clear();
    ulawAudio.clear();
  }
}

{
  in.skip(1);
  Input input=new org.red5.io.amf.Input(in);
  String action=deserializer.deserialize(input,String.class);
  int invokeId=deserializer.deserialize(input,Number.class).intValue();
  FlexMessage msg=new FlexMessage();
  msg.setInvokeId(invokeId);
  Object[] params=new Object[]{};
  if (in.hasRemaining()) {
    setupClassLoader();
    ArrayList<Object> paramList=new ArrayList<Object>();
    final Object obj=deserializer.deserialize(input,Object.class);
    if (obj != null) {
      paramList.add(obj);
    }
    while (in.hasRemaining()) {
      byte tmp=in.get();
      in.position(in.position() - 1);
      if (tmp == AMF.TYPE_AMF3_OBJECT) {
        input=new org.red5.io.amf3.Input(in);
      }
 else {
        input=new org.red5.io.amf.Input(in);
      }
      paramList.add(deserializer.deserialize(input,Object.class));
    }
    params=paramList.toArray();
    if (log.isDebugEnabled()) {
      log.debug("Num params: " + paramList.size());
      for (int i=0; i < params.length; i++) {
        log.debug(" > " + i + ": "+ params[i]);
      }
    }
  }
  final int dotIndex=action.lastIndexOf('.');
  String serviceName=(dotIndex == -1) ? null : action.substring(0,dotIndex);
  String serviceMethod=(dotIndex == -1) ? action : action.substring(dotIndex + 1,action.length());
  PendingCall call=new PendingCall(serviceName,serviceMethod,params);
  msg.setCall(call);
  return msg;
}

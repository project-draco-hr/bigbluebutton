{
  final int remaining=in.remaining();
  if (rtmp.getMode() == RTMP.MODE_SERVER) {
    if (rtmp.getState() == RTMP.STATE_CONNECT) {
      if (remaining < HANDSHAKE_SIZE + 1) {
        if (log.isDebugEnabled()) {
          log.debug("Handshake init too small, buffering. remaining: " + remaining);
        }
        rtmp.bufferDecoding(HANDSHAKE_SIZE + 1);
        return null;
      }
 else {
        final ByteBuffer hs=ByteBuffer.allocate(HANDSHAKE_SIZE);
        in.get();
        BufferUtils.put(hs,in,HANDSHAKE_SIZE);
        hs.flip();
        rtmp.setState(RTMP.STATE_HANDSHAKE);
        return hs;
      }
    }
    if (rtmp.getState() == RTMP.STATE_HANDSHAKE) {
      if (log.isDebugEnabled()) {
        log.debug("Handshake reply");
      }
      if (remaining < HANDSHAKE_SIZE) {
        if (log.isDebugEnabled()) {
          log.debug("Handshake reply too small, buffering. remaining: " + remaining);
        }
        rtmp.bufferDecoding(HANDSHAKE_SIZE);
        return null;
      }
 else {
        if (!rtmp.validateHandshakeReply(in,8,HANDSHAKE_SIZE - 8)) {
          if (log.isDebugEnabled()) {
            log.debug("Handshake reply validation failed, disconnecting client.");
          }
          in.skip(HANDSHAKE_SIZE);
          rtmp.setState(RTMP.STATE_ERROR);
          throw new HandshakeFailedException("Handshake validation failed");
        }
        in.skip(HANDSHAKE_SIZE);
        rtmp.setState(RTMP.STATE_CONNECTED);
        rtmp.continueDecoding();
        return null;
      }
    }
  }
 else {
    if (rtmp.getState() == RTMP.STATE_CONNECT) {
      final int size=(2 * HANDSHAKE_SIZE) + 1;
      if (remaining < size) {
        if (log.isDebugEnabled()) {
          log.debug("Handshake init too small, buffering. remaining: " + remaining);
        }
        rtmp.bufferDecoding(size);
        return null;
      }
 else {
        final ByteBuffer hs=ByteBuffer.allocate(size);
        BufferUtils.put(hs,in,size);
        hs.flip();
        rtmp.setState(RTMP.STATE_CONNECTED);
        return hs;
      }
    }
  }
  return null;
}

def main():
    meetingId = ''
    ingestDir = ''
    logFile = ''
    try:
        (opts, args) = getopt.getopt(sys.argv[1:], 'hm:i:', ['help', 'meeting-id=', 'ingest-dir='])
    except getopt.GetoptError as err:
        print str(err)
        usage()
        sys.exit(2)
    output = None
    verbose = False
    for (o, a) in opts:
        if (o in ('-h', '--help')):
            usage()
            sys.exit()
        elif (o in ('-m', '--meeting-id')):
            meetingId = a
        elif (o in ('-i', '--ingest-dir')):
            ingestDir = a
        else:
            assert False, 'unhandled option'
    meetingArchiveDir = ((ingestDir + '/') + meetingId)
    audioArchiveDir = ((meetingArchiveDir + '/') + AUDIO_DIR)
    logFile = (meetingArchiveDir + '/process-audio.log')
    logging.basicConfig(level=logging.INFO, filename=logFile)
    logging.info('Starting ingest process')
    audioRecordings = []
    meetingAudio = []
    tree = etree.parse((meetingArchiveDir + '/events.xml'))
    r = tree.xpath('/events/event')
    firstEventTimestamp = get_first_timestamp_of_session(r)
    lastEventTimestamp = get_last_timestamp_of_session(r)
    startRecordingEvents = get_start_audio_recording_events(tree)
    stopRecordingEvents = get_stop_audio_recording_events(tree)
    if (len(startRecordingEvents) != len(stopRecordingEvents)):
        logging.warn(('Number of start events [%s] does not match stop events [%s]' % (len(startRecordingEvents), len(stopRecordingEvents))))
    for evt in startRecordingEvents:
        ar = AudioRecording()
        ar.filename = evt.find('filename').text
        ar.startRecordingTimestamp = (int(evt.find('recordingTimestamp').text) / 1000)
        ar.startEventTimestamp = evt.get('timestamp')
        audioRecordings.append(ar)
    for evt in stopRecordingEvents:
        if (not insert_stop_event_info(evt, audioRecordings)):
            ar = AudioRecording()
            ar.filename = evt.find('filename').text
            ar.stopRecordingTimestamp = (int(evt.find('recordingTimestamp').text) / 1000)
            ar.stopEventTimestamp = evt.get('timestamp')
            audioRecordings.append(ar)
    determine_if_file_is_present(audioArchiveDir, audioRecordings)
    determine_length_of_audio_from_file(audioArchiveDir, audioRecordings)
    sanitize_audio_recording_info(audioRecordings)
    generate_recording_xml(audioArchiveDir, audioRecordings)
    pad_beginning_of_audio_if_needed(audioRecordings[0], firstEventTimestamp, meetingAudio)
    pad_between_recorded_audio_files_if_needed(audioRecordings, meetingAudio)
    pad_end_of_audio_if_needed(audioRecordings[(-1)], lastEventTimestamp, meetingAudio)
    create_gap_audio_files(meetingArchiveDir, meetingAudio, audioSamplingRate)
    audio_filenames = get_audio_filenames(meetingAudio)
    outputWavFile = concatenate_all_audio_files(meetingArchiveDir, audio_filenames)
    create_ogg_from_wav(meetingArchiveDir, outputWavFile)

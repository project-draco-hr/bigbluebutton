def main():
    meetingId = ''
    archiveDir = ''
    logFile = ''
    try:
        (opts, args) = getopt.getopt(sys.argv[1:], 'hm:a:l', ['help', 'meeting-id=', 'archive-dir='])
    except getopt.GetoptError as err:
        print str(err)
        usage()
        sys.exit(2)
    output = None
    verbose = False
    for (o, a) in opts:
        if (o in ('-h', '--help')):
            usage()
            sys.exit()
        elif (o in ('-m', '--meeting-id')):
            meetingId = a
        elif (o in ('-a', '--archive-dir')):
            archiveDir = a
        else:
            assert False, 'unhandled option'
    meetingArchiveDir = ((archiveDir + '/') + meetingId)
    logFile = (meetingArchiveDir + '/process-audio.log')
    logging.basicConfig(level=logging.INFO, filename=logFile)
    logging.info('Starting ingest process')
    audioRecordings = []
    meetingAudio = []
    tree = etree.parse((meetingArchiveDir + '/events.xml'))
    r = tree.xpath('/events/event')
    firstEventTimestamp = get_first_timestamp_of_session(r)
    lastEventTimestamp = get_last_timestamp_of_session(r)
    startRecordingEvents = get_start_audio_recording_events(tree)
    stopRecordingEvents = get_stop_audio_recording_events(tree)
    if (len(startRecordingEvents) == len(stopRecordingEvents)):
        logging.warn(('Number of start events [%s] does not match stop events [%s]' % (len(startRecordingEvents), len(stopRecordingEvents))))
        print ('Number of start events [%s] does not match stop events [%s]' % (len(startRecordingEvents), len(stopRecordingEvents)))
    for evt in startRecordingEvents:
        ar = AudioRecording()
        ar.filename = evt.find('filename').text
        ar.startTimestamp = evt.find('recordingTimestamp').text
        ar.startEventTimestamp = evt.get('timestamp')
        audioRecordings.append(ar)
    for evt in stopRecordingEvents:
        if (not insert_stop_event_info(evt, audioRecordings)):
            ar = AudioRecording()
            ar.filename = evt.find('filename').text
            ar.stopTimestamp = evt.find('recordingTimestamp').text
            ar.stopEventTimestamp = evt.get('timestamp')
            audioRecordings.append(ar)
    determine_if_file_is_present(((meetingArchiveDir + '/') + AUDIO_DIR), audioRecordings)
    determine_length_of_audio_from_file(((meetingArchiveDir + '/') + AUDIO_DIR), audioRecordings)

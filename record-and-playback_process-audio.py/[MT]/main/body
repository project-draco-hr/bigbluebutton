def main():
    meetingId = ''
    archiveDir = ''
    logFile = ''
    try:
        (opts, args) = getopt.getopt(sys.argv[1:], 'hm:a:l', ['help', 'meeting-id=', 'archive-dir='])
    except getopt.GetoptError as err:
        print str(err)
        usage()
        sys.exit(2)
    output = None
    verbose = False
    for (o, a) in opts:
        if (o in ('-h', '--help')):
            usage()
            sys.exit()
        elif (o in ('-m', '--meeting-id')):
            meetingId = a
        elif (o in ('-a', '--archive-dir')):
            archiveDir = a
        else:
            assert False, 'unhandled option'
    meetingArchiveDir = ((archiveDir + '/') + meetingId)
    logFile = (meetingArchiveDir + '/process-audio.log')
    logging.basicConfig(level=logging.INFO, filename=logFile)
    logging.info('Starting ingest process')
    tree = etree.parse((meetingArchiveDir + '/events.xml'))
    r = tree.xpath('/events/event')
    firstEventTimestamp = get_first_timestamp_of_session(r)
    lastEventTimestamp = get_last_timestamp_of_session(r)
    audioRecordings = []
    audioRecordingsDict = {}
    meetingAudio = []
    startRecordingEvents = get_start_audio_recording_events(tree)
    create_audio_recordings_for_events(startRecordingEvents, audioRecordings, audioRecordingsDict)
    stopRecordingEvents = get_stop_audio_recording_events(tree)
    get_stop_recording_events_info(stopRecordingEvents, audioRecordingsDict)
    pad_beginning_of_audio_if_needed(audioRecordings[0], firstEventTimestamp, meetingAudio)
    pad_between_recorded_audio_files_if_needed(audioRecordings, meetingAudio)
    pad_end_of_audio_if_needed(audioRecordings[(-1)], lastEventTimestamp, meetingAudio)
    create_gap_audio_files(meetingArchiveDir, meetingAudio, audioSamplingRate)
    audio_filenames = get_audio_filenames(meetingAudio)
    outputWavFile = concatenate_all_audio_files(meetingArchiveDir, audio_filenames)
    create_ogg_from_wav(meetingArchiveDir, outputWavFile)
    proc = subprocess.Popen('sox recording.wav -n stat', shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    print proc.stdout.read()

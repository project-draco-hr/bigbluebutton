def main():
    meetingId = ''
    archiveDir = ''
    logFile = ''
    try:
        (opts, args) = getopt.getopt(sys.argv[1:], 'hm:a:l', ['help', 'meeting-id=', 'archive-dir='])
    except getopt.GetoptError as err:
        print str(err)
        usage()
        sys.exit(2)
    output = None
    verbose = False
    for (o, a) in opts:
        if (o in ('-h', '--help')):
            usage()
            sys.exit()
        elif (o in ('-m', '--meeting-id')):
            meetingId = a
        elif (o in ('-a', '--archive-dir')):
            archiveDir = a
        else:
            assert False, 'unhandled option'
    meetingArchiveDir = ((archiveDir + '/') + meetingId)
    logFile = (meetingArchiveDir + '/process-audio.log')
    logging.basicConfig(level=logging.INFO, filename=logFile)
    logging.info('Starting ingest process')
    logging.info('Loading workspace/events.xml')
    tree = etree.parse((meetingArchiveDir + '/events.xml'))
    r = tree.xpath('/events/event')
    logging.info('Determining start and stop timestamp for session')
    begin = r[0].get('timestamp')
    end = r[(len(r) - 1)].get('timestamp')
    length = (long(end) - long(begin))
    logging.info('Count how many audio files')
    proc = subprocess.Popen((('ls ' + meetingArchiveDir) + '/audio/*.wav | wc -l'), shell=True, stdout=subprocess.PIPE)
    num_files = proc.communicate()[0]
    audio_recs = []
    audio_recs_dict = {}
    start_rec_events = tree.xpath("//event[@name='StartRecordingEvent']")
    for evt in start_rec_events:
        e = AudioRecording()
        e.filename = evt.find('filename').text
        e.start_timestamp = evt.find('recordingTimestamp').text
        e.start_event_timestamp = evt.get('timestamp')
        audio_recs.append(e)
        audio_recs_dict[e.filename] = e
    stop_rec_events = tree.xpath("//event[@name='StopRecordingEvent']")
    num_stop_rec = len(stop_rec_events)
    print num_stop_rec
    for evt in stop_rec_events:
        rec = audio_recs_dict[evt.find('filename').text]
        rec.stop_timestamp = evt.find('recordingTimestamp').text
        rec.stop_event_timestamp = evt.get('timestamp')
    length_of_gap = (long(audio_recs[0].start_event_timestamp) - long(begin))
    print ('l gap ' + str(length_of_gap))
    if (length_of_gap > 0):
        add_audio_recording(long(begin), long(audio_recs[0].start_event_timestamp), True, length_of_gap)
    num_audio_recs = len(audio_recs)
    i = 0
    while (i < (num_audio_recs - 1)):
        ar_prev = audio_recs[i]
        ar_next = audio_recs[(i + 1)]
        length_of_gap = (long(ar_next.start_event_timestamp) - long(ar_prev.stop_event_timestamp))
        audio_recordings.append(ar_prev)
        if (length_of_gap > 0):
            print ('l gap ' + str(length_of_gap))
            add_audio_recording(long(ar_prev.stop_event_timestamp), long(ar_next.start_event_timestamp), True, length_of_gap)
        i += 1
    ai = 0
    if (len(audio_recs) > 1):
        ai = (-1)
    length_of_gap = (long(end) - long(audio_recs[ai].stop_event_timestamp))
    print ('l gap ' + str(length_of_gap))
    audio_recordings.append(audio_recs[ai])
    if (length_of_gap > 0):
        add_audio_recording(long(audio_recs[ai].stop_event_timestamp), long(end), True, length_of_gap)
    print len(audio_recordings)
    audio_filenames = []
    for ar in audio_recordings:
        if ar.gap_file:
            ar.filename = ((meetingArchiveDir + '/audio/') + ar.filename)
            audio_filenames.append((ar.filename + '.wav'))
            lsec = long(ar.length_of_gap)
            print ((('gap = ' + str(lsec)) + ' ') + ar.filename)
            create_audio_gap_file(lsec, ar.filename, audio_sampling_rate)
        else:
            audio_filenames.append(ar.filename)
    concat_cmd = 'sox '
    for ar in audio_filenames:
        concat_cmd += (' ' + ar)
    outputWavFile = (meetingArchiveDir + '/recording.wav')
    concat_cmd += (' ' + outputWavFile)
    logging.info('Creating recorded audio file')
    proc = subprocess.Popen(concat_cmd, shell=True)
    proc.wait()
    ogg_file = (meetingArchiveDir + '/recording.ogg')
    logging.info('Convert wav file to ogg')
    proc = subprocess.Popen(((('oggenc -a "Budka Suflera" -l "Za Ostatni Grosz" -N 1 -t "Za Ostatni Grosz" -d "1981-05-01" -c "composer=Romuald Lipko, Marek Dutkiewicz" -o ' + ogg_file) + ' ') + outputWavFile), shell=True)
    proc.wait()
    proc = subprocess.Popen('sox recording.wav -n stat', shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    print proc.stdout.read()

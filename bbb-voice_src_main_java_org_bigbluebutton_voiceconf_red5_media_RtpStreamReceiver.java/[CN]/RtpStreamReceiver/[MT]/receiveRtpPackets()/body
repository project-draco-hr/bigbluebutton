{
  int packetReceivedCounter=0;
  int internalBufferLength=payloadLength + RTP_HEADER_SIZE;
  long lastPacketReceived=System.currentTimeMillis();
  byte[] internalBuffer=new byte[internalBufferLength];
  RtpPacket rtpPacket=new RtpPacket(internalBuffer,internalBufferLength);
  while (receivePackets) {
    try {
      rtpSocket.receive(rtpPacket);
      packetReceivedCounter++;
      long now=System.currentTimeMillis();
      long packetInterval=now - lastPacketReceived;
      lastPacketReceived=now;
      if (rtpPacket.getSeqNum() > lastSequenceNumber) {
        lastSequenceNumber=rtpPacket.getSeqNum();
        AudioByteData audioData=new AudioByteData(rtpPacket.getPayload(),rtpPacket.getTimestamp());
        if (listener != null)         listener.onAudioDataReceived(audioData);
 else         log.debug("No listener for incoming audio packet");
      }
 else {
        System.out.println("SequenceNumber < lastSequence (" + rtpPacket.getSeqNum() + " < "+ lastSequenceNumber+ ")");
      }
      long interpacketTimestampDiff=rtpPacket.getTimestamp() - lastPacketTimestamp;
      if (rtpPacket.getTimestamp() > lastPacketTimestamp)       lastPacketTimestamp=rtpPacket.getTimestamp();
      System.out.println("RTP data = [" + rtpPacket.getPayload().length + ","+ interpacketTimestampDiff+ ","+ packetInterval+ "]");
    }
 catch (    IOException e) {
      receivePackets=false;
    }
  }
  log.debug("Rtp Receiver stopped.");
  log.debug("Packet Received = " + packetReceivedCounter + ".");
  if (listener != null)   listener.onStoppedReceiving();
}

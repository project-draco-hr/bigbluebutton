{
  int packetReceivedCounter=0;
  int internalBufferLength=payloadLength + RTP_HEADER_SIZE;
  while (receivePackets) {
    try {
      byte[] internalBuffer;
      RtpPacket rtpPacket;
      internalBuffer=new byte[internalBufferLength];
      rtpPacket=new RtpPacket(internalBuffer,internalBufferLength);
      rtpSocket.receive(rtpPacket);
      byte[] pb=rtpPacket.getPacket();
      StringBuilder p=new StringBuilder("Rx [");
      for (int i=0; i < pb.length; i++) {
        p.append(Integer.toHexString(pb[i] & 0xFF) + ",");
      }
      p.append("] " + pb.length + " "+ internalBufferLength);
      log.debug(p.toString());
      packetReceivedCounter++;
      log.debug("Received packet [" + rtpPacket.getRtcpPayloadType() + ","+ rtpPacket.getPayloadType()+ ", length="+ rtpPacket.getPayloadLength()+ "] seqNum[rtpSeqNum="+ rtpPacket.getSeqNum()+ ",lastSeqNum="+ lastSequenceNumber+ "][rtpTS="+ rtpPacket.getTimestamp()+ ",lastTS="+ lastPacketTimestamp+ "][port="+ rtpSocket.getDatagramSocket().getLocalPort()+ "]");
      processRtpPacket(rtpPacket);
      rtpPacket=null;
    }
 catch (    IOException e) {
      receivePackets=false;
    }
  }
  log.debug("Rtp Receiver stopped. Packet Received = " + packetReceivedCounter + ".");
  if (listener != null)   listener.onStoppedReceiving();
}

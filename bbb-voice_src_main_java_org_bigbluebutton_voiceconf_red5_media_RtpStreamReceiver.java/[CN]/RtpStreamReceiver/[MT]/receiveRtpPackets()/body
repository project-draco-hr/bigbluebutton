{
  int packetReceivedCounter=0;
  int internalBufferLength=payloadLength + RTP_HEADER_SIZE;
  byte[] internalBuffer=new byte[internalBufferLength];
  RtpPacket rtpPacket=new RtpPacket(internalBuffer,internalBufferLength);
  while (receivePackets) {
    try {
      rtpSocket.receive(rtpPacket);
      packetReceivedCounter++;
      if (shouldHandlePacket(rtpPacket)) {
        processRtpPacket(rtpPacket);
      }
 else {
        if (firstPacket) {
          firstPacket=false;
          log.debug("First packet seqNum[rtpSeqNum=" + rtpPacket.getSeqNum() + ",lastSeqNum="+ lastSequenceNumber+ "][rtpTS="+ rtpPacket.getTimestamp()+ ",lastTS="+ lastPacketTimestamp+ "][port="+ rtpSocket.getDatagramSocket().getLocalPort()+ "]");
          processRtpPacket(rtpPacket);
        }
 else {
          log.debug("Corrupt packet seqNum[rtpSeqNum=" + rtpPacket.getSeqNum() + ",lastSeqNum="+ lastSequenceNumber+ "][rtpTS="+ rtpPacket.getTimestamp()+ ",lastTS="+ lastPacketTimestamp+ "][port="+ rtpSocket.getDatagramSocket().getLocalPort()+ "]");
        }
      }
    }
 catch (    IOException e) {
      receivePackets=false;
    }
  }
  log.debug("Rtp Receiver stopped.");
  log.debug("Packet Received = " + packetReceivedCounter + ".");
  if (listener != null)   listener.onStoppedReceiving();
}

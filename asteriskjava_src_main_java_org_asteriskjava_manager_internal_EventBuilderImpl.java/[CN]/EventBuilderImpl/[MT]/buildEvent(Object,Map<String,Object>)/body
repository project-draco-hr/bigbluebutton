{
  ManagerEvent event;
  String eventType;
  Class eventClass;
  Constructor constructor;
  if (attributes.get("event") == null) {
    logger.error("No event type in properties");
    return null;
  }
  if (!(attributes.get("event") instanceof String)) {
    logger.error("Event type is not a String");
    return null;
  }
  eventType=((String)attributes.get("event")).toLowerCase(Locale.US);
  if ("userevent".equals(eventType)) {
    String userEventType;
    if (attributes.get("userevent") == null) {
      logger.error("No user event type in properties");
      return null;
    }
    if (!(attributes.get("userevent") instanceof String)) {
      logger.error("User event type is not a String");
      return null;
    }
    userEventType=((String)attributes.get("userevent")).toLowerCase(Locale.US);
    eventType=eventType + userEventType;
  }
  eventClass=registeredEventClasses.get(eventType);
  if (eventClass == null) {
    logger.info("No event class registered for event type '" + eventType + "', attributes: "+ attributes+ ". Please report at http://jira.reucon.org/browse/AJ");
    return null;
  }
  try {
    constructor=eventClass.getConstructor(new Class[]{Object.class});
  }
 catch (  NoSuchMethodException ex) {
    logger.error("Unable to get constructor of " + eventClass.getName(),ex);
    return null;
  }
  try {
    event=(ManagerEvent)constructor.newInstance(source);
  }
 catch (  Exception ex) {
    logger.error("Unable to create new instance of " + eventClass.getName(),ex);
    return null;
  }
  setAttributes(event,attributes,ignoredAttributes);
  if (event instanceof ResponseEvent) {
    ResponseEvent responseEvent;
    String actionId;
    responseEvent=(ResponseEvent)event;
    actionId=responseEvent.getActionId();
    if (actionId != null) {
      responseEvent.setActionId(ManagerUtil.stripInternalActionId(actionId));
      responseEvent.setInternalActionId(ManagerUtil.getInternalActionId(actionId));
    }
  }
  return event;
}

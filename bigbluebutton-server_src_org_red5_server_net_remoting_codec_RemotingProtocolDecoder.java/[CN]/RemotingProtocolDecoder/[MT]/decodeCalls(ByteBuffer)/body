{
  if (log.isDebugEnabled()) {
    log.debug("Decode calls");
  }
  List<RemotingCall> calls=new LinkedList<RemotingCall>();
  org.red5.io.amf.Input input;
  int count=in.getUnsignedShort();
  if (log.isDebugEnabled()) {
    log.debug("Calls: " + count);
  }
  int limit=in.limit();
  for (int i=0; i < count; i++) {
    in.limit(limit);
    String serviceString=org.red5.io.amf.Input.getString(in);
    String clientCallback=org.red5.io.amf.Input.getString(in);
    if (log.isDebugEnabled()) {
      log.debug("callback: " + clientCallback);
    }
    @SuppressWarnings("unused") int length=in.getInt();
    byte type=in.get();
    if (type != AMF.TYPE_ARRAY) {
      throw new RuntimeException("AMF0 array type expected but found " + type);
    }
    int elements=in.getInt();
    boolean isAMF3=false;
    List<Object> values=new ArrayList<Object>();
    for (int j=0; j < elements; j++) {
      byte amf3Check=in.get();
      in.position(in.position() - 1);
      isAMF3=(amf3Check == AMF.TYPE_AMF3_OBJECT);
      if (isAMF3) {
        input=new org.red5.io.amf3.Input(in);
      }
 else {
        input=new org.red5.io.amf.Input(in);
      }
      input.reset(ReferenceMode.MODE_REMOTING);
      values.add(deserializer.deserialize(input,Object.class));
    }
    String serviceName;
    String serviceMethod;
    int dotPos=serviceString.lastIndexOf('.');
    if (dotPos != -1) {
      serviceName=serviceString.substring(0,dotPos);
      serviceMethod=serviceString.substring(dotPos + 1,serviceString.length());
    }
 else {
      serviceName="";
      serviceMethod=serviceString;
    }
    boolean isMessaging=false;
    if ("".equals(serviceName) && "null".equals(serviceMethod)) {
      serviceName=FlexMessagingService.SERVICE_NAME;
      serviceMethod="handleRequest";
      isMessaging=true;
    }
    if (log.isDebugEnabled()) {
      log.debug("Service: " + serviceName + " Method: "+ serviceMethod);
    }
    Object[] args=values.toArray(new Object[values.size()]);
    if (log.isDebugEnabled()) {
      for (      Object element : args) {
        log.debug("> " + element);
      }
    }
    calls.add(new RemotingCall(serviceName,serviceMethod,args,clientCallback,isAMF3,isMessaging));
  }
  return calls;
}

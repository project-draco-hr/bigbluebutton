{
  JsonParser parser=new JsonParser();
  JsonObject obj=(JsonObject)parser.parse(message);
  if (obj.has("header") && obj.has("payload")) {
    JsonObject header=(JsonObject)obj.get("header");
    JsonObject payload=(JsonObject)obj.get("payload");
    if (header.has("name")) {
      String messageName=header.get("name").getAsString();
      if (PRESENTATION_CONVERSION_DONE.equals(messageName)) {
        if (payload.has(Constants.MEETING_ID) && payload.has(Constants.CODE) && payload.has(Constants.PRESENTATION)) {
          String meetingId=payload.get(Constants.MEETING_ID).getAsString();
          String code=payload.get(Constants.CODE).getAsString();
          JsonObject presObj=(JsonObject)payload.get(Constants.PRESENTATION).getAsJsonObject();
          Map<String,Object> presentation=new HashMap<String,Object>();
          if (presObj.has("id") && presObj.has("name") && presObj.has("current")&& presObj.has("pages")) {
            String id=presObj.get("id").getAsString();
            boolean current=presObj.get("current").getAsBoolean();
            String name=presObj.get("name").getAsString();
            presentation.put("id",id);
            presentation.put("current",current);
            presentation.put("name",name);
            JsonArray pages=(JsonArray)presObj.get(Constants.PAGES);
            Util util=new Util();
            ArrayList<Map<String,Object>> pagesList=util.extractPages(pages);
            presentation.put("pages",pagesList);
            return new PresentationConversionDoneMessage(meetingId,code,presentation);
          }
        }
      }
    }
  }
  return null;
}

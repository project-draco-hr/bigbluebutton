{
  log.debug("Message Received in channel: " + channel);
  Gson gson=new Gson();
  if (channel.equalsIgnoreCase(MessagingConstants.SYSTEM_CHANNEL)) {
    HashMap<String,String> map=gson.fromJson(message,new TypeToken<Map<String,String>>(){
    }
.getType());
    String meetingId=map.get("meetingId");
    String messageId=map.get("messageId");
    if (messageId != null) {
      if (MessagingConstants.END_MEETING_REQUEST_EVENT.equalsIgnoreCase(messageId)) {
        for (        MessageListener listener : listeners) {
          listener.endMeetingRequest(meetingId);
        }
      }
    }
  }
 else   if (channel.equalsIgnoreCase(MessagingConstants.PRESENTATION_CHANNEL)) {
    HashMap<String,String> map=gson.fromJson(message,new TypeToken<Map<String,String>>(){
    }
.getType());
    for (    MessageListener listener : listeners) {
      listener.presentationUpdates(map);
    }
  }
 else   if (channel.equalsIgnoreCase(MessagingConstants.BIGBLUEBUTTON_BRIDGE)) {
    JsonParser parser=new JsonParser();
    JsonArray array=parser.parse(message).getAsJsonArray();
    String meetingId=gson.fromJson(array.get(0),String.class);
    String messageName=gson.fromJson(array.get(1),String.class);
    if (messageName.equalsIgnoreCase("user list change")) {
      JsonArray nPartipants=array.get(2).getAsJsonArray();
      Map<String,Participant> map=participantsApplication.getParticipants(meetingId);
      for (int i=0; i < nPartipants.size(); i++) {
        JsonObject obj=nPartipants.get(i).getAsJsonObject();
        String nUserId=gson.fromJson(obj.get("id"),String.class);
        if (!map.containsKey(nUserId)) {
          String username=gson.fromJson(obj.get("name"),String.class);
          String externalUserID=UUID.randomUUID().toString();
          Map<String,Object> status=new HashMap<String,Object>();
          status.put("raiseHand",false);
          status.put("presenter",false);
          status.put("hasStream",false);
          participantsApplication.participantJoin(meetingId,Long.parseLong(nUserId),username,"VIEWER",externalUserID,status);
        }
 else {
          map.remove(nUserId);
        }
      }
      Set<String> set=map.keySet();
      for (      String id : set) {
        participantsApplication.participantLeft(meetingId,Long.parseLong(id));
      }
    }
  }
}

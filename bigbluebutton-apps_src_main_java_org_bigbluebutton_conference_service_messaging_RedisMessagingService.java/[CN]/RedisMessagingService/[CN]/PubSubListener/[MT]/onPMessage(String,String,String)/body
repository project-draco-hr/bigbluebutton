{
  log.debug("Message Received in channel: " + channel);
  Gson gson=new Gson();
  if (channel.equalsIgnoreCase(MessagingConstants.SYSTEM_CHANNEL)) {
    HashMap<String,String> map=gson.fromJson(message,new TypeToken<Map<String,String>>(){
    }
.getType());
    String meetingId=map.get("meetingId");
    String messageId=map.get("messageId");
    if (messageId != null) {
      if (MessagingConstants.END_MEETING_REQUEST_EVENT.equalsIgnoreCase(messageId)) {
        for (        MessageListener listener : listeners) {
          listener.endMeetingRequest(meetingId);
        }
      }
    }
  }
 else   if (channel.equalsIgnoreCase(MessagingConstants.PRESENTATION_CHANNEL)) {
    HashMap<String,String> map=gson.fromJson(message,new TypeToken<Map<String,String>>(){
    }
.getType());
    for (    MessageListener listener : listeners) {
      listener.presentationUpdates(map);
    }
  }
 else   if (channel.equalsIgnoreCase(MessagingConstants.BIGBLUEBUTTON_BRIDGE)) {
    JsonParser parser=new JsonParser();
    JsonArray array=parser.parse(message).getAsJsonArray();
    String meetingId=gson.fromJson(array.get(0),String.class);
    String messageName=gson.fromJson(array.get(1),String.class);
    if (messageName.equalsIgnoreCase("user list change")) {
      JsonArray remoteParticipants=array.get(2).getAsJsonArray();
      Map<String,Participant> localParticipants=new HashMap<String,Participant>();
      Map<String,Participant> loadedParticipants=participantsApplication.getParticipants(meetingId);
      if (loadedParticipants != null) {
        localParticipants.putAll(loadedParticipants);
      }
      for (int i=0; i < remoteParticipants.size(); i++) {
        JsonObject obj=remoteParticipants.get(i).getAsJsonObject();
        String nUserId=gson.fromJson(obj.get("id"),String.class);
        boolean found=false;
        for (        Map.Entry entry : localParticipants.entrySet()) {
          String key=entry.getKey().toString();
          if (key.equalsIgnoreCase(nUserId)) {
            found=true;
            localParticipants.remove(entry.getKey());
            break;
          }
        }
        if (!found) {
          String username=gson.fromJson(obj.get("name"),String.class);
          String externalUserID=UUID.randomUUID().toString();
          Map<String,Object> status=new HashMap<String,Object>();
          status.put("raiseHand",false);
          status.put("presenter",false);
          status.put("hasStream",false);
          participantsApplication.participantJoin(meetingId,Long.parseLong(nUserId),username,"VIEWER",externalUserID,status);
        }
      }
      for (      Map.Entry entry : localParticipants.entrySet()) {
        participantsApplication.participantLeft(meetingId,Long.parseLong(entry.getKey().toString()));
      }
    }
 else     if (messageName.equalsIgnoreCase("msg")) {
      String username=gson.fromJson(array.get(2),String.class);
      String chat_message=gson.fromJson(array.get(3),String.class);
      Participant p=participantsApplication.getParticipantByUsername(meetingId,username);
      String userid="0";
      if (p != null) {
        userid=p.getInternalUserID().toString();
      }
      ChatObject chatobj=new ChatObject(chat_message,username,"0","00:00","en",userid);
      chatApplication.sendMessage(meetingId,chatobj);
    }
 else     if (messageName.equalsIgnoreCase("setPresenter")) {
      String pubID=gson.fromJson(array.get(2),String.class);
      Participant p=participantsApplication.getParticipantByUserID(meetingId,Long.parseLong(pubID));
      log.debug("new presenter: " + p.getInternalUserID() + " "+ p.getName());
      ArrayList<String> newPresenter=new ArrayList<String>();
      newPresenter.add(pubID);
      newPresenter.add(p.getName());
      newPresenter.add(pubID);
      participantsApplication.setParticipantStatus(meetingId,p.getInternalUserID(),"presenter",true);
      ArrayList<String> curPresenter=participantsApplication.getCurrentPresenter(meetingId);
      if (curPresenter != null) {
        String curUserID=curPresenter.get(0);
        log.debug("previous presenter: " + curUserID + " "+ curPresenter.get(1));
        if (!curUserID.equalsIgnoreCase(pubID)) {
          participantsApplication.setParticipantStatus(meetingId,Long.parseLong(curUserID),"presenter",false);
        }
      }
      participantsApplication.assignPresenter(meetingId,newPresenter);
    }
 else     if (messageName.equalsIgnoreCase("mvCur")) {
      Double xPercent=gson.fromJson(array.get(2),Double.class);
      Double yPercent=gson.fromJson(array.get(3),Double.class);
      presentationApplication.sendCursorUpdate(meetingId,xPercent,yPercent);
    }
  }
}

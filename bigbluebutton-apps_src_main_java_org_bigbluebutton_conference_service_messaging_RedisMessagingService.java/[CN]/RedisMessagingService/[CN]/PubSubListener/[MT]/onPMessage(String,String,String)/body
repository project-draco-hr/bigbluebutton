{
  log.debug("Message Received in channel: " + channel);
  Gson gson=new Gson();
  HashMap<String,String> map=gson.fromJson(message,new TypeToken<Map<String,String>>(){
  }
.getType());
  if (channel.equalsIgnoreCase(MessagingConstants.SYSTEM_CHANNEL)) {
    String meetingId=map.get("meetingId");
    String messageId=map.get("messageId");
    if (messageId != null) {
      if (MessagingConstants.END_MEETING_REQUEST_EVENT.equalsIgnoreCase(messageId)) {
        for (        MessageListener listener : listeners) {
          listener.endMeetingRequest(meetingId);
        }
      }
    }
  }
 else   if (channel.equalsIgnoreCase(MessagingConstants.PRESENTATION_CHANNEL)) {
    for (    MessageListener listener : listeners) {
      listener.presentationUpdates(map);
    }
  }
 else   if (channel.equalsIgnoreCase(MessagingConstants.POLLING_CHANNEL)) {
    String meetingId=map.get("meetingId");
    String messageId=map.get("messageId");
    if (messageId != null) {
      if (messageId.equalsIgnoreCase(MessagingConstants.SEND_POLLS_EVENT)) {
        String title=map.get("title");
        String question=map.get("question");
        List<String> answers=gson.fromJson((String)map.get("answers"),new TypeToken<List<String>>(){
        }
.getType());
        for (        MessageListener listener : listeners)         listener.storePoll(meetingId,title,question,answers);
      }
    }
  }
}

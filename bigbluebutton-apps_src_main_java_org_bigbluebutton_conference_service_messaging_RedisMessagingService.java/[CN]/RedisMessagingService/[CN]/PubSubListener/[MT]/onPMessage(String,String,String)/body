{
  log.debug("Message Received in channel: " + channel);
  Gson gson=new Gson();
  if (channel.equalsIgnoreCase(MessagingConstants.SYSTEM_CHANNEL)) {
    HashMap<String,String> map=gson.fromJson(message,new TypeToken<Map<String,String>>(){
    }
.getType());
    String meetingId=map.get("meetingId");
    String messageId=map.get("messageId");
    if (messageId != null) {
      if (MessagingConstants.END_MEETING_REQUEST_EVENT.equalsIgnoreCase(messageId)) {
        for (        MessageListener listener : listeners) {
          listener.endMeetingRequest(meetingId);
        }
      }
    }
  }
 else   if (channel.equalsIgnoreCase(MessagingConstants.PRESENTATION_CHANNEL)) {
    HashMap<String,String> map=gson.fromJson(message,new TypeToken<Map<String,String>>(){
    }
.getType());
    for (    MessageListener listener : listeners) {
      listener.presentationUpdates(map);
    }
  }
 else   if (channel.equalsIgnoreCase(MessagingConstants.BIGBLUEBUTTON_BRIDGE)) {
    JsonParser parser=new JsonParser();
    JsonArray array=parser.parse(message).getAsJsonArray();
    String meetingId=gson.fromJson(array.get(0),String.class);
    String messageName=gson.fromJson(array.get(1),String.class);
    if (messageName.equalsIgnoreCase("user join")) {
      String nUserId=gson.fromJson(array.get(2),String.class);
      String username=gson.fromJson(array.get(3),String.class);
      String role=gson.fromJson(array.get(4),String.class);
      String externalUserID=UUID.randomUUID().toString();
      Map<String,Object> status=new HashMap<String,Object>();
      status.put("raiseHand",false);
      status.put("presenter",false);
      status.put("hasStream",false);
      participantsApplication.participantJoin(meetingId,nUserId,username,role,externalUserID,status);
    }
 else     if (messageName.equalsIgnoreCase("user leave")) {
      String nUserId=gson.fromJson(array.get(2),String.class);
      participantsApplication.participantLeft(meetingId,nUserId);
    }
 else     if (messageName.equalsIgnoreCase("msg")) {
      String username=gson.fromJson(array.get(2),String.class);
      String message_text=gson.fromJson(array.get(3),String.class);
      String userid=gson.fromJson(array.get(4),String.class);
      ChatMessageVO chatObj=new ChatMessageVO();
      chatObj.chatType="PUBLIC";
      chatObj.fromUserID=userid;
      chatObj.fromUsername=username;
      chatObj.fromColor="0";
      chatObj.fromTime=0.0;
      chatObj.fromTimezoneOffset=(long)0;
      chatObj.fromLang="en";
      chatObj.toUserID="";
      chatObj.toUsername="";
      chatObj.message=message_text;
      chatApplication.sendPublicMessage(meetingId,chatObj);
    }
 else     if (messageName.equalsIgnoreCase("setPresenter")) {
      String pubID=gson.fromJson(array.get(2),String.class);
      User p=participantsApplication.getParticipantByUserID(meetingId,pubID);
      log.debug("new presenter: " + p.getInternalUserID() + " "+ p.getName());
      ArrayList<String> newPresenter=new ArrayList<String>();
      newPresenter.add(pubID);
      newPresenter.add(p.getName());
      newPresenter.add(pubID);
      participantsApplication.setParticipantStatus(meetingId,p.getInternalUserID(),"presenter",true);
      ArrayList<String> curPresenter=participantsApplication.getCurrentPresenter(meetingId);
      if (curPresenter != null) {
        String curUserID=curPresenter.get(0);
        log.debug("previous presenter: " + curUserID + " "+ curPresenter.get(1));
        if (!curUserID.equalsIgnoreCase(pubID)) {
          participantsApplication.setParticipantStatus(meetingId,curUserID,"presenter",false);
        }
      }
      participantsApplication.assignPresenter(meetingId,newPresenter);
    }
 else     if (messageName.equalsIgnoreCase("mvCur")) {
      Double xPercent=gson.fromJson(array.get(2),Double.class);
      Double yPercent=gson.fromJson(array.get(3),Double.class);
      if (xPercent == null || yPercent == null) {
        xPercent=0.0;
        yPercent=0.0;
      }
      presentationApplication.sendCursorUpdate(meetingId,xPercent,yPercent);
    }
  }
}

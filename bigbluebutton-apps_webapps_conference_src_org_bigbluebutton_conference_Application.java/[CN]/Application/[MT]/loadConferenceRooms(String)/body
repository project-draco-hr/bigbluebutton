{
  Map<String,Room> rooms=new HashMap<String,Room>();
  try {
    log.debug("Loading conference rooms");
    Resource roomsXML=getResource(fileName);
    InputStream xmlinStream=roomsXML.getInputStream();
    BufferedReader xmldataStream=new BufferedReader(new InputStreamReader(xmlinStream));
    StringBuffer xmlStringBuf=new StringBuffer();
    String inputLine;
    while ((inputLine=xmldataStream.readLine()) != null) {
      xmlStringBuf.append(inputLine);
    }
    xmldataStream.close();
    Document dom=null;
    try {
      dom=this.stringToDoc(xmlStringBuf.toString());
    }
 catch (    IOException ioex) {
      log.error("IOException converting xml to dom",ioex);
    }
    Element docElement=dom.getDocumentElement();
    NodeList nl_level1=docElement.getElementsByTagName("conference-room");
    if (nl_level1 != null && nl_level1.getLength() > 0) {
      String roomName;
      String modPassword;
      String viewPassword;
      for (int i=0; i < nl_level1.getLength(); i++) {
        Element roomItem_nl_level1=(Element)nl_level1.item(i);
        roomName=getTextValue(roomItem_nl_level1,"name");
        modPassword=getTextValue(roomItem_nl_level1,"mod-password");
        viewPassword=getTextValue(roomItem_nl_level1,"view-password");
        log.debug("Item no:" + i + ", Name: "+ roomName+ ", moderator: "+ modPassword+ ", viewer: "+ viewPassword);
        Room room=new Room(roomName,modPassword,viewPassword);
        rooms.put(roomName,room);
      }
    }
  }
 catch (  IOException ioe) {
    log.debug(ioe.toString());
  }
  return rooms;
}

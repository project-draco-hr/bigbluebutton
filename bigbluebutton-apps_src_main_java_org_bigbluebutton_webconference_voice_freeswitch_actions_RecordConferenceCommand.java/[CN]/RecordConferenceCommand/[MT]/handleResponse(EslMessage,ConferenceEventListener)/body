{
  String firstLine=response.getBodyLines().get(0);
  if (!firstLine.startsWith("<?xml")) {
    log.error("Not XML: [{}]",firstLine);
    return;
  }
  XMLResponseConferenceListParser confXML=new XMLResponseConferenceListParser();
  SAXParserFactory spf=SAXParserFactory.newInstance();
  try {
    SAXParser sp=spf.newSAXParser();
    String responseBody=org.springframework.util.StringUtils.collectionToDelimitedString(response.getBodyLines(),"\n");
    log.debug("record responce\n{}\nEND",responseBody);
    responseBody=responseBody.trim().replaceFirst("^([\\W]+)<","<");
    ByteArrayInputStream bs=new ByteArrayInputStream(responseBody.getBytes());
    sp.parse(bs,confXML);
    ParticipantJoinedEvent pj;
    for (    ConferenceMember member : confXML.getConferenceList()) {
      log.debug("conf list member [{}] for room [{}].",member.getId(),confXML.getConferenceRoom());
      pj=new ParticipantJoinedEvent(member.getId(),confXML.getConferenceRoom(),member.getCallerId(),member.getCallerIdName(),member.getMuted(),member.getSpeeking());
      eventListener.handleConferenceEvent(pj);
    }
  }
 catch (  SAXException se) {
    log.error("Cannot parse repsonce. ",se);
  }
catch (  ParserConfigurationException pce) {
    log.error("ParserConfigurationException. ",pce);
  }
catch (  IOException ie) {
    log.error("Cannot parse repsonce. IO Exception. ",ie);
  }
}

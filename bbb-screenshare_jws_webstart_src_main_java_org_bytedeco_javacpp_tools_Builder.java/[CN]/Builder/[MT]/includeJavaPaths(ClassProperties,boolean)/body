{
  if (properties.getProperty("platform","").startsWith("android")) {
    return;
  }
  String platform=Loader.getPlatform();
  final String jvmlink=properties.getProperty("platform.link.prefix","") + "jvm" + properties.getProperty("platform.link.suffix","");
  final String jvmlib=properties.getProperty("platform.library.prefix","") + "jvm" + properties.getProperty("platform.library.suffix","");
  final String[] jnipath=new String[2];
  final String[] jvmpath=new String[2];
  FilenameFilter filter=new FilenameFilter(){
    @Override public boolean accept(    File dir,    String name){
      if (new File(dir,"jni.h").exists()) {
        jnipath[0]=dir.getAbsolutePath();
      }
      if (new File(dir,"jni_md.h").exists()) {
        jnipath[1]=dir.getAbsolutePath();
      }
      if (new File(dir,jvmlink).exists()) {
        jvmpath[0]=dir.getAbsolutePath();
      }
      if (new File(dir,jvmlib).exists()) {
        jvmpath[1]=dir.getAbsolutePath();
      }
      return new File(dir,name).isDirectory();
    }
  }
;
  File javaHome;
  try {
    javaHome=new File(System.getProperty("java.home")).getParentFile().getCanonicalFile();
  }
 catch (  IOException|NullPointerException e) {
    logger.warn("Could not include header files from java.home:" + e);
    return;
  }
  ArrayList<File> dirs=new ArrayList<File>(Arrays.asList(javaHome.listFiles(filter)));
  while (!dirs.isEmpty()) {
    File d=dirs.remove(dirs.size() - 1);
    String dpath=d.getPath();
    File[] files=d.listFiles(filter);
    if (dpath == null || files == null) {
      continue;
    }
    for (    File f : files) {
      try {
        f=f.getCanonicalFile();
      }
 catch (      IOException e) {
      }
      if (!dpath.startsWith(f.getPath())) {
        dirs.add(f);
      }
    }
  }
  if (jnipath[0] != null && jnipath[0].equals(jnipath[1])) {
    jnipath[1]=null;
  }
 else   if (jnipath[0] == null) {
    String macpath="/System/Library/Frameworks/JavaVM.framework/Headers/";
    if (new File(macpath).isDirectory()) {
      jnipath[0]=macpath;
    }
  }
  if (jvmpath[0] != null && jvmpath[0].equals(jvmpath[1])) {
    jvmpath[1]=null;
  }
  properties.addAll("platform.includepath",jnipath);
  if (platform.equals(properties.getProperty("platform",platform))) {
    if (header) {
      properties.get("platform.link").add(0,"jvm");
      properties.addAll("platform.linkpath",jvmpath);
    }
    if (platform.startsWith("macosx")) {
      properties.addAll("platform.framework","JavaVM");
    }
  }
}

{
  ArrayList<String> command=new ArrayList<String>();
  includeJavaPaths(properties,header);
  String platform=Loader.getPlatform();
  String compilerPath=properties.getProperty("platform.compiler");
  command.add(compilerPath);
{
    String p=properties.getProperty("platform.sysroot.prefix","");
    for (    String s : properties.get("platform.sysroot")) {
      if (new File(s).isDirectory()) {
        if (p.endsWith(" ")) {
          command.add(p.trim());
          command.add(s);
        }
 else {
          command.add(p + s);
        }
      }
    }
  }
{
    String p=properties.getProperty("platform.includepath.prefix","");
    for (    String s : properties.get("platform.includepath")) {
      if (new File(s).isDirectory()) {
        if (p.endsWith(" ")) {
          command.add(p.trim());
          command.add(s);
        }
 else {
          command.add(p + s);
        }
      }
    }
  }
  command.add(sourceFilename);
  Collection<String> allOptions=properties.get("platform.compiler.*");
  if (allOptions.isEmpty()) {
    allOptions.add("default");
  }
  for (  String s : allOptions) {
    if (s == null || s.length() == 0) {
      continue;
    }
    String p="platform.compiler." + s;
    String options=properties.getProperty(p);
    if (options != null && options.length() > 0) {
      command.addAll(Arrays.asList(options.split(" ")));
    }
 else     if (!"default".equals(s)) {
      logger.warn("Could not get the property named \"" + p + "\"");
    }
  }
  command.addAll(compilerOptions);
  String output=properties.getProperty("platform.compiler.output");
  for (int i=1; i < 2 || output != null; i++, output=properties.getProperty("platform.compiler.output" + i)) {
    if (output != null && output.length() > 0) {
      command.addAll(Arrays.asList(output.split(" ")));
    }
    if (output == null || output.length() == 0 || output.endsWith(" ")) {
      command.add(outputFilename);
    }
 else {
      command.add(command.remove(command.size() - 1) + outputFilename);
    }
  }
{
    String p=properties.getProperty("platform.linkpath.prefix","");
    String p2=properties.getProperty("platform.linkpath.prefix2");
    for (    String s : properties.get("platform.linkpath")) {
      if (new File(s).isDirectory()) {
        if (p.endsWith(" ")) {
          command.add(p.trim());
          command.add(s);
        }
 else {
          command.add(p + s);
        }
        if (p2 != null) {
          if (p2.endsWith(" ")) {
            command.add(p2.trim());
            command.add(s);
          }
 else {
            command.add(p2 + s);
          }
        }
      }
    }
  }
{
    String p=properties.getProperty("platform.link.prefix","");
    String x=properties.getProperty("platform.link.suffix","");
    int i=command.size();
    for (    String s : properties.get("platform.link")) {
      String[] libnameversion=s.split("@");
      if (libnameversion.length == 3 && libnameversion[1].length() == 0) {
        s=libnameversion[0] + libnameversion[2];
      }
 else {
        s=libnameversion[0];
      }
      if (p.endsWith(" ") && x.startsWith(" ")) {
        command.add(i,p.trim());
        command.add(i + 1,s);
        command.add(i + 2,x.trim());
      }
 else       if (p.endsWith(" ")) {
        command.add(i,p.trim());
        command.add(i + 1,s + x);
      }
 else       if (x.startsWith(" ")) {
        command.add(i,p + s);
        command.add(i + 1,x.trim());
      }
 else {
        command.add(i,p + s + x);
      }
    }
  }
{
    String p=properties.getProperty("platform.frameworkpath.prefix","");
    for (    String s : properties.get("platform.frameworkpath")) {
      if (new File(s).isDirectory()) {
        if (p.endsWith(" ")) {
          command.add(p.trim());
          command.add(s);
        }
 else {
          command.add(p + s);
        }
      }
    }
  }
{
    String p=properties.getProperty("platform.framework.prefix","");
    String x=properties.getProperty("platform.framework.suffix","");
    for (    String s : properties.get("platform.framework")) {
      if (p.endsWith(" ") && x.startsWith(" ")) {
        command.add(p.trim());
        command.add(s);
        command.add(x.trim());
      }
 else       if (p.endsWith(" ")) {
        command.add(p.trim());
        command.add(s + x);
      }
 else       if (x.startsWith(" ")) {
        command.add(p + s);
        command.add(x.trim());
      }
 else {
        command.add(p + s + x);
      }
    }
  }
  String text="";
  boolean windows=platform.startsWith("windows");
  for (  String s : command) {
    boolean hasSpaces=s.indexOf(" ") > 0;
    if (hasSpaces) {
      text+=windows ? "\"" : "'";
    }
    text+=s;
    if (hasSpaces) {
      text+=windows ? "\"" : "'";
    }
    text+=" ";
  }
  logger.info(text);
  ProcessBuilder pb=new ProcessBuilder(command);
  pb.directory(workingDirectory);
  if (environmentVariables != null) {
    pb.environment().putAll(environmentVariables);
  }
  return pb.inheritIO().start().waitFor();
}

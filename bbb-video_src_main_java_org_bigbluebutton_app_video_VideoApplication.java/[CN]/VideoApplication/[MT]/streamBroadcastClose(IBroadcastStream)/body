{
  super.streamBroadcastClose(stream);
  IConnection conn=Red5.getConnectionLocal();
  String scopeName;
  if (conn != null) {
    scopeName=conn.getScope().getName();
  }
 else {
    log.info("Connection local was null, using scope name from the stream: {}",stream);
    scopeName=stream.getScope().getName();
  }
  log.info("streamBroadcastClose " + stream.getPublishedName() + " "+ System.currentTimeMillis()+ " "+ conn.getScope().getName());
  String userId=getUserId();
  String meetingId=conn.getScope().getName();
  String streamId=stream.getPublishedName();
  publisher.userUnshareWebcamRequestMessage(meetingId,userId,streamId);
  IStreamListener listener=streamListeners.remove(scopeName + "-" + stream.getPublishedName());
  if (listener != null) {
    stream.removeStreamListener(listener);
  }
  if (recordVideoStream) {
    long publishDuration=(System.currentTimeMillis() - stream.getCreationTime()) / 1000;
    log.info("streamBroadcastClose " + stream.getPublishedName() + " "+ System.currentTimeMillis()+ " "+ scopeName);
    Map<String,String> event=new HashMap<String,String>();
    event.put("module","WEBCAM");
    event.put("timestamp",genTimestamp().toString());
    event.put("meetingId",scopeName);
    event.put("stream",stream.getPublishedName());
    event.put("duration",new Long(publishDuration).toString());
    event.put("eventName","StopWebcamShareEvent");
    recordingService.record(scopeName,event);
  }
}

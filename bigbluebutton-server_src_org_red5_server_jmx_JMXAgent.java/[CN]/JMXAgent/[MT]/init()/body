{
  HashMap env=null;
  if (enableHtmlAdapter) {
    try {
      int port=htmlAdapterPort == null ? 8082 : Integer.valueOf(htmlAdapterPort);
      html=new HtmlAdaptorServer(port);
      ObjectName htmlName=new ObjectName(JMXFactory.getDefaultDomain() + ":type=HtmlAdaptorServer,port=" + port);
      log.debug("Created HTML adaptor on port: " + port);
      mbs.registerMBean(html,htmlName);
      html.start();
      log.info("JMX HTML connector server successfully started");
    }
 catch (    Exception e) {
      log.error("Error in setup of JMX subsystem (HTML adapter)",e);
    }
  }
 else {
    log.info("JMX HTML adapter was not enabled");
  }
  if (enableRmiAdapter) {
    log.debug("Create an RMI connector server");
    try {
      Registry r=null;
      try {
        r=LocateRegistry.getRegistry(Integer.valueOf(rmiAdapterPort));
        for (        String regName : r.list()) {
          if (regName.equals("red5")) {
            r.unbind("red5");
          }
        }
      }
 catch (      RemoteException re) {
        log.info("RMI Registry server was not found on port " + rmiAdapterPort);
        if (startRegistry) {
          log.info("Starting an internal RMI registry");
          r=LocateRegistry.createRegistry(Integer.valueOf(rmiAdapterPort));
        }
      }
      JMXServiceURL url=new JMXServiceURL("service:jmx:rmi:///jndi/rmi://:" + rmiAdapterPort + "/red5");
      if (enableSsl) {
        log.debug("Initialize the environment map");
        env=new HashMap();
        SslRMIClientSocketFactory csf=new SslRMIClientSocketFactory();
        SslRMIServerSocketFactory ssf=new SslRMIServerSocketFactory();
        env.put(RMIConnectorServer.RMI_CLIENT_SOCKET_FACTORY_ATTRIBUTE,csf);
        env.put(RMIConnectorServer.RMI_SERVER_SOCKET_FACTORY_ATTRIBUTE,ssf);
      }
      if (StringUtils.isNotBlank(remoteAccessProperties)) {
        if (null == env) {
          env=new HashMap();
        }
        File file=new File(remoteAccessProperties);
        if (!file.exists()) {
          log.debug("Access file was not found on path, will prepend config_root");
          remoteAccessProperties=System.getProperty("red5.config_root") + '/' + remoteAccessProperties;
          remotePasswordProperties=System.getProperty("red5.config_root") + '/' + remotePasswordProperties;
        }
        env.put("jmx.remote.x.access.file",remoteAccessProperties);
        env.put("jmx.remote.x.password.file",remotePasswordProperties);
      }
      cs=JMXConnectorServerFactory.newJMXConnectorServer(url,env,mbs);
      cs.addNotificationListener(this,null,null);
      log.debug("Start the RMI connector server");
      cs.start();
      log.info("JMX RMI connector server successfully started");
    }
 catch (    ConnectException e) {
      log.warn("Could not establish RMI connection to port " + rmiAdapterPort + ", please make sure \"rmiregistry\" is running and configured to listen on this port.");
    }
catch (    IOException e) {
      String errMsg=e.getMessage();
      if (errMsg.indexOf("NameAlreadyBoundException") != -1) {
        log.error("JMX connector (red5) already registered, you will need to restart your rmiregistry");
      }
 else {
        log.error("{}",e);
      }
    }
catch (    Exception e) {
      log.error("Error in setup of JMX subsystem (RMI connector)",e);
    }
  }
 else {
    log.info("JMX RMI adapter was not enabled");
  }
}

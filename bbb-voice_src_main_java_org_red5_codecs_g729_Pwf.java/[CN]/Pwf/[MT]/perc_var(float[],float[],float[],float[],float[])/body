{
  float lar[]=new float[4];
  int lar_new;
  float[] lsf;
  float critlar0, critlar1;
  float d_min, temp;
  int i, k;
  lar_new=2;
  for (i=0; i < 2; i++)   lar[lar_new + i]=(float)Math.log10((double)(((float)1.0 + r_c[i]) / ((float)1.0 - r_c[i])));
  for (i=0; i < 2; i++) {
    lar[i]=(float)0.5 * (lar[lar_new + i] + lar_old[i]);
    lar_old[i]=lar[lar_new + i];
  }
  for (k=0; k < 2; k++) {
    critlar0=lar[2 * k];
    critlar1=lar[2 * k + 1];
    if (smooth != 0) {
      if ((critlar0 < LD8KConstants.THRESH_L1) && (critlar1 > LD8KConstants.THRESH_H1))       smooth=0;
    }
 else {
      if ((critlar0 > LD8KConstants.THRESH_L2) || (critlar1 < LD8KConstants.THRESH_H2))       smooth=1;
    }
    if (smooth == 0) {
      gamma1[k]=LD8KConstants.GAMMA1_0;
      if (k == 0)       lsf=lsfint;
 else       lsf=lsfnew;
      d_min=lsf[1] - lsf[0];
      for (i=1; i < LD8KConstants.M - 1; i++) {
        temp=lsf[i + 1] - lsf[i];
        if (temp < d_min)         d_min=temp;
      }
      gamma2[k]=LD8KConstants.ALPHA * d_min + LD8KConstants.BETA;
      if (gamma2[k] > LD8KConstants.GAMMA2_0_H)       gamma2[k]=LD8KConstants.GAMMA2_0_H;
      if (gamma2[k] < LD8KConstants.GAMMA2_0_L)       gamma2[k]=LD8KConstants.GAMMA2_0_L;
    }
 else {
      gamma1[k]=LD8KConstants.GAMMA1_1;
      gamma2[k]=LD8KConstants.GAMMA2_1;
      ;
    }
  }
  return;
}

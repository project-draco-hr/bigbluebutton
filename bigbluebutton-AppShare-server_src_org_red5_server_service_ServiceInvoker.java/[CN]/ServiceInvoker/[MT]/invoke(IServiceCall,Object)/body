{
  IConnection conn=Red5.getConnectionLocal();
  String methodName=call.getServiceMethodName();
  Object[] args=call.getArguments();
  Object[] argsWithConnection;
  if (args != null) {
    argsWithConnection=new Object[args.length + 1];
    argsWithConnection[0]=conn;
    for (int i=0; i < args.length; i++) {
      if (log.isDebugEnabled()) {
        log.debug("   " + i + " => "+ args[i]);
      }
      argsWithConnection[i + 1]=args[i];
    }
  }
 else {
    argsWithConnection=new Object[]{conn};
  }
  Object[] methodResult=null;
  methodResult=ServiceUtils.findMethodWithExactParameters(service,methodName,argsWithConnection);
  if (methodResult.length == 0 || methodResult[0] == null) {
    methodResult=ServiceUtils.findMethodWithExactParameters(service,methodName,args);
    if (methodResult.length == 0 || methodResult[0] == null) {
      methodResult=ServiceUtils.findMethodWithListParameters(service,methodName,argsWithConnection);
      if (methodResult.length == 0 || methodResult[0] == null) {
        methodResult=ServiceUtils.findMethodWithListParameters(service,methodName,args);
        if (methodResult.length == 0 || methodResult[0] == null) {
          if (log.isDebugEnabled()) {
            log.error("Method " + methodName + " with parameters "+ (args == null ? Collections.EMPTY_LIST : Arrays.asList(args))+ " not found in "+ service);
          }
          call.setStatus(Call.STATUS_METHOD_NOT_FOUND);
          if (args != null && args.length > 0) {
            call.setException(new MethodNotFoundException(methodName,args));
          }
 else {
            call.setException(new MethodNotFoundException(methodName));
          }
          return false;
        }
      }
    }
  }
  Object result=null;
  Method method=(Method)methodResult[0];
  Object[] params=(Object[])methodResult[1];
  try {
    if (method.isAnnotationPresent(DeclarePrivate.class)) {
      if (log.isDebugEnabled()) {
        log.debug("Method " + method + " is declared private.");
      }
      throw new NotAllowedException("you are not allowed to execute this method");
    }
    final DeclareProtected annotation=method.getAnnotation(DeclareProtected.class);
    if (annotation != null) {
      if (!conn.getClient().hasPermission(conn,annotation.permission())) {
        if (log.isDebugEnabled()) {
          log.debug("Client " + conn.getClient() + " doesn't have required permission "+ annotation.permission()+ " to call "+ method);
        }
        throw new NotAllowedException("you are not allowed to execute this method");
      }
    }
    if (log.isDebugEnabled()) {
      log.debug("Invoking method: " + method.toString());
    }
    if (method.getReturnType() == Void.class) {
      method.invoke(service,params);
      call.setStatus(Call.STATUS_SUCCESS_VOID);
    }
 else {
      result=method.invoke(service,params);
      if (log.isDebugEnabled()) {
        log.debug("result: " + result);
      }
      call.setStatus(result == null ? Call.STATUS_SUCCESS_NULL : Call.STATUS_SUCCESS_RESULT);
    }
    if (call instanceof IPendingServiceCall) {
      ((IPendingServiceCall)call).setResult(result);
    }
  }
 catch (  NotAllowedException e) {
    call.setException(e);
    call.setStatus(Call.STATUS_ACCESS_DENIED);
    return false;
  }
catch (  IllegalAccessException accessEx) {
    call.setException(accessEx);
    call.setStatus(Call.STATUS_ACCESS_DENIED);
    log.error("Error executing call: " + call);
    log.error("Service invocation error",accessEx);
    return false;
  }
catch (  InvocationTargetException invocationEx) {
    call.setException(invocationEx);
    call.setStatus(Call.STATUS_INVOCATION_EXCEPTION);
    if (!(invocationEx.getCause() instanceof ClientDetailsException)) {
      log.error("Error executing call: " + call);
      log.error("Service invocation error",invocationEx);
    }
    return false;
  }
catch (  Exception ex) {
    call.setException(ex);
    call.setStatus(Call.STATUS_GENERAL_EXCEPTION);
    log.error("Error executing call: " + call);
    log.error("Service invocation error",ex);
    return false;
  }
  return true;
}

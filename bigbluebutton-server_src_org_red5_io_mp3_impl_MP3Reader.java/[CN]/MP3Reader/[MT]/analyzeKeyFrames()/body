{
  if (frameMeta != null) {
    return frameMeta;
  }
  if (frameCache != null) {
    frameMeta=frameCache.loadKeyFrameMeta(file);
    if (frameMeta != null && frameMeta.duration > 0) {
      duration=frameMeta.duration;
      frameMeta.audioOnly=true;
      posTimeMap=new HashMap<Integer,Double>();
      for (int i=0; i < frameMeta.positions.length; i++) {
        posTimeMap.put((int)frameMeta.positions[i],(double)frameMeta.timestamps[i]);
      }
      return frameMeta;
    }
  }
  List<Integer> positionList=new ArrayList<Integer>();
  List<Double> timestampList=new ArrayList<Double>();
  dataRate=0;
  long rate=0;
  int count=0;
  int origPos=in.position();
  double time=0;
  in.position(0);
  processID3v2Header();
  searchNextFrame();
  while (this.hasMoreTags()) {
    MP3Header header=readHeader();
    if (header == null) {
      break;
    }
    if (header.frameSize() == 0) {
      break;
    }
    int pos=in.position() - 4;
    if (pos + header.frameSize() > in.limit()) {
      break;
    }
    positionList.add(pos);
    timestampList.add(time);
    rate+=header.getBitRate() / 1000;
    time+=header.frameDuration();
    in.position(pos + header.frameSize());
    count++;
  }
  in.position(origPos);
  duration=(long)time;
  dataRate=(int)(rate / count);
  posTimeMap=new HashMap<Integer,Double>();
  frameMeta=new KeyFrameMeta();
  frameMeta.duration=duration;
  frameMeta.positions=new long[positionList.size()];
  frameMeta.timestamps=new int[timestampList.size()];
  frameMeta.audioOnly=true;
  for (int i=0; i < frameMeta.positions.length; i++) {
    frameMeta.positions[i]=positionList.get(i);
    frameMeta.timestamps[i]=timestampList.get(i).intValue();
    posTimeMap.put(positionList.get(i),timestampList.get(i));
  }
  if (frameCache != null)   frameCache.saveKeyFrameMeta(file,frameMeta);
  return frameMeta;
}

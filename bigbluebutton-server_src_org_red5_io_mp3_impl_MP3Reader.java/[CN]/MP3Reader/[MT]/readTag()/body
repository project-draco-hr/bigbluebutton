{
  if (firstFrame) {
    firstFrame=false;
    return fileMeta;
  }
  MP3Header header=readHeader();
  if (header == null) {
    return null;
  }
  int frameSize=header.frameSize();
  if (frameSize == 0) {
    return null;
  }
  if (in.position() + frameSize - 4 > in.limit()) {
    in.position(in.limit());
    return null;
  }
  tag=new Tag(IoConstants.TYPE_AUDIO,(int)currentTime,frameSize + 1,null,prevSize);
  prevSize=frameSize + 1;
  currentTime+=header.frameDuration();
  ByteBuffer body=ByteBuffer.allocate(tag.getBodySize());
  byte tagType=(IoConstants.FLAG_FORMAT_MP3 << 4) | (IoConstants.FLAG_SIZE_16_BIT << 1);
switch (header.getSampleRate()) {
case 44100:
    tagType|=IoConstants.FLAG_RATE_44_KHZ << 2;
  break;
case 22050:
tagType|=IoConstants.FLAG_RATE_22_KHZ << 2;
break;
case 11025:
tagType|=IoConstants.FLAG_RATE_11_KHZ << 2;
break;
default :
tagType|=IoConstants.FLAG_RATE_5_5_KHZ << 2;
}
tagType|=(header.isStereo() ? IoConstants.FLAG_TYPE_STEREO : IoConstants.FLAG_TYPE_MONO);
body.put(tagType);
final int limit=in.limit();
body.putInt(header.getData());
in.limit(in.position() + frameSize - 4);
body.put(in);
body.flip();
in.limit(limit);
tag.setBody(body);
return tag;
}

{
  if (checkWriteReference(object))   return;
  storeReference(object);
  BeanMap beanMap=new BeanMap(object);
  Set<BeanMap.Entry<?,?>> set=beanMap.entrySet();
  if ((set.size() == 0) || (set.size() == 1 && beanMap.containsKey("class"))) {
    writeArbitraryObject(object,serializer);
    return;
  }
  Class<?> objectClass=object.getClass();
  if (!objectClass.isAnnotationPresent(Anonymous.class)) {
    buf.put(AMF.TYPE_CLASS_OBJECT);
    putString(buf,objectClass.getName());
  }
 else {
    buf.put(AMF.TYPE_OBJECT);
  }
  if (object instanceof ICustomSerializable) {
    ((ICustomSerializable)object).serialize(this,serializer);
    buf.put((byte)0x00);
    buf.put((byte)0x00);
    buf.put(AMF.TYPE_END_OF_OBJECT);
    return;
  }
  for (  BeanMap.Entry<?,?> entry : set) {
    if (entry.getKey().toString().equals("class")) {
      continue;
    }
    String keyName=entry.getKey().toString();
    if (dontSerializeField(objectClass,keyName))     continue;
    putString(buf,keyName);
    serializer.serialize(this,entry.getValue());
  }
  buf.put((byte)0x00);
  buf.put((byte)0x00);
  buf.put(AMF.TYPE_END_OF_OBJECT);
}

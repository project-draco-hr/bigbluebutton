{
  if (an.getType().equalsIgnoreCase(WhiteboardBridge.PENCIL_TYPE)) {
    String shapeType="path";
    String shapeID=Long.toString(System.currentTimeMillis());
    ArrayList<Object> data=new ArrayList<Object>();
    Map map=an.getAnnotation();
    ArrayList points=(ArrayList)map.get("points");
    Jedis jedis=messagingService.createRedisClient();
    HashMap<String,String> mapAnn=new HashMap<String,String>();
    mapAnn.put("shape",shapeType);
    data.add(points);
    data.add((Integer.parseInt(map.get("color").toString()) == 0) ? "#000000" : map.get("color"));
    data.add(map.get("thickness"));
    Gson gson=new Gson();
    mapAnn.put("data",gson.toJson(data));
    jedis.rpush("meeting-" + meetingID + "-presentation-"+ map.get("presentationID")+ "-page-"+ map.get("pageNumber")+ "-currentshapes",shapeID);
    jedis.hmset("meeting-" + meetingID + "-presentation-"+ map.get("presentationID")+ "-page-"+ map.get("pageNumber")+ "-shape-"+ shapeID,mapAnn);
    messagingService.dropRedisClient(jedis);
  }
 else   if (an.getType().equalsIgnoreCase(WhiteboardBridge.RECTANGLE_TYPE)) {
    if (an.getStatus().equalsIgnoreCase("DRAW_END")) {
      String shapeType="rect";
      String shapeID=Long.toString(System.currentTimeMillis());
      ArrayList<Object> data=new ArrayList<Object>();
      Map map=an.getAnnotation();
      ArrayList points=(ArrayList)map.get("points");
      Double pX=Double.parseDouble(points.get(0).toString());
      Double pY=Double.parseDouble(points.get(1).toString());
      Double pW=Double.parseDouble(points.get(2).toString());
      Double pH=Double.parseDouble(points.get(3).toString());
      Jedis jedis=messagingService.createRedisClient();
      HashMap<String,String> mapAnn=new HashMap<String,String>();
      mapAnn.put("shape",shapeType);
      data.add(pX / 100);
      data.add(pY / 100);
      data.add(pW / 100);
      data.add(pH / 100);
      data.add((Integer.parseInt(map.get("color").toString()) == 0) ? "#000000" : map.get("color"));
      data.add(map.get("thickness"));
      Gson gson=new Gson();
      mapAnn.put("data",gson.toJson(data));
      jedis.rpush("meeting-" + meetingID + "-presentation-"+ map.get("presentationID")+ "-page-"+ map.get("pageNumber")+ "-currentshapes",shapeID);
      jedis.hmset("meeting-" + meetingID + "-presentation-"+ map.get("presentationID")+ "-page-"+ map.get("pageNumber")+ "-shape-"+ shapeID,mapAnn);
      messagingService.dropRedisClient(jedis);
    }
  }
 else   if (an.getType().equalsIgnoreCase(WhiteboardBridge.ELLIPSE_TYPE)) {
    if (an.getStatus().equalsIgnoreCase("DRAW_END")) {
      String shapeType="ellipse";
      String shapeID=Long.toString(System.currentTimeMillis());
      ArrayList<Object> data=new ArrayList<Object>();
      Map map=an.getAnnotation();
      ArrayList points=(ArrayList)map.get("points");
      Double pX=Double.parseDouble(points.get(0).toString());
      Double pY=Double.parseDouble(points.get(1).toString());
      Double vR=Double.parseDouble(points.get(2).toString());
      Double hR=Double.parseDouble(points.get(3).toString());
      Jedis jedis=messagingService.createRedisClient();
      HashMap<String,String> mapAnn=new HashMap<String,String>();
      mapAnn.put("shape",shapeType);
      data.add(pX / 100);
      data.add(pY / 100);
      data.add(vR / 100);
      data.add(hR / 100);
      data.add((Integer.parseInt(map.get("color").toString()) == 0) ? "#000000" : map.get("color"));
      data.add(map.get("thickness"));
      Gson gson=new Gson();
      mapAnn.put("data",gson.toJson(data));
      jedis.rpush("meeting-" + meetingID + "-presentation-"+ map.get("presentationID")+ "-page-"+ map.get("pageNumber")+ "-currentshapes",shapeID);
      jedis.hmset("meeting-" + meetingID + "-presentation-"+ map.get("presentationID")+ "-page-"+ map.get("pageNumber")+ "-shape-"+ shapeID,mapAnn);
      messagingService.dropRedisClient(jedis);
    }
  }
 else   if (an.getType().equalsIgnoreCase(WhiteboardBridge.TRIANGLE_TYPE)) {
    if (an.getStatus().equalsIgnoreCase("DRAW_END")) {
      String shapeType="triangle";
      String shapeID=Long.toString(System.currentTimeMillis());
      ArrayList<Object> data=new ArrayList<Object>();
      Map map=an.getAnnotation();
      ArrayList points=(ArrayList)map.get("points");
      Double pX=Double.parseDouble(points.get(0).toString());
      Double pY=Double.parseDouble(points.get(1).toString());
      Double pBase=Double.parseDouble(points.get(2).toString());
      Double pHeight=Double.parseDouble(points.get(3).toString());
      Jedis jedis=messagingService.createRedisClient();
      HashMap<String,String> mapAnn=new HashMap<String,String>();
      mapAnn.put("shape",shapeType);
      data.add(pX / 100);
      data.add(pY / 100);
      data.add(pBase / 100);
      data.add(pHeight / 100);
      data.add((Integer.parseInt(map.get("color").toString()) == 0) ? "#000000" : map.get("color"));
      data.add(map.get("thickness"));
      Gson gson=new Gson();
      mapAnn.put("data",gson.toJson(data));
      jedis.rpush("meeting-" + meetingID + "-presentation-"+ map.get("presentationID")+ "-page-"+ map.get("pageNumber")+ "-currentshapes",shapeID);
      jedis.hmset("meeting-" + meetingID + "-presentation-"+ map.get("presentationID")+ "-page-"+ map.get("pageNumber")+ "-shape-"+ shapeID,mapAnn);
      messagingService.dropRedisClient(jedis);
    }
  }
 else   if (an.getType().equalsIgnoreCase(WhiteboardBridge.LINE_TYPE)) {
    if (an.getStatus().equalsIgnoreCase("DRAW_END")) {
      String shapeType="line";
      String shapeID=Long.toString(System.currentTimeMillis());
      ArrayList<Object> data=new ArrayList<Object>();
      Map map=an.getAnnotation();
      ArrayList points=(ArrayList)map.get("points");
      Double p1X=Double.parseDouble(points.get(0).toString());
      Double p1Y=Double.parseDouble(points.get(1).toString());
      Double p2X=Double.parseDouble(points.get(2).toString());
      Double p2Y=Double.parseDouble(points.get(3).toString());
      Jedis jedis=messagingService.createRedisClient();
      HashMap<String,String> mapAnn=new HashMap<String,String>();
      mapAnn.put("shape",shapeType);
      data.add(p1X / 100);
      data.add(p1Y / 100);
      data.add(p2X / 100);
      data.add(p2Y / 100);
      data.add((Integer.parseInt(map.get("color").toString()) == 0) ? "#000000" : map.get("color"));
      data.add(map.get("thickness"));
      Gson gson=new Gson();
      mapAnn.put("data",gson.toJson(data));
      jedis.rpush("meeting-" + meetingID + "-presentation-"+ map.get("presentationID")+ "-page-"+ map.get("pageNumber")+ "-currentshapes",shapeID);
      jedis.hmset("meeting-" + meetingID + "-presentation-"+ map.get("presentationID")+ "-page-"+ map.get("pageNumber")+ "-shape-"+ shapeID,mapAnn);
      messagingService.dropRedisClient(jedis);
    }
  }
 else   if (an.getType().equalsIgnoreCase(WhiteboardBridge.TEXT_TYPE)) {
    if (an.getStatus().equalsIgnoreCase("textPublished")) {
      String shapeType="text";
      String shapeID=Long.toString(System.currentTimeMillis());
      ArrayList<Object> data=new ArrayList<Object>();
      Map map=an.getAnnotation();
      Double pX=Double.parseDouble(map.get("x").toString());
      Double pY=Double.parseDouble(map.get("y").toString());
      Double tbWidth=Double.parseDouble(map.get("textBoxWidth").toString());
      Double tbHeight=Double.parseDouble(map.get("textBoxHeight").toString());
      Jedis jedis=messagingService.createRedisClient();
      HashMap<String,String> mapAnn=new HashMap<String,String>();
      mapAnn.put("shape",shapeType);
      data.add(pX / 100);
      data.add(pY / 100);
      data.add(tbWidth);
      data.add(tbHeight);
      data.add((Integer.parseInt(map.get("fontColor").toString()) == 0) ? "#000000" : map.get("color"));
      data.add(map.get("fontSize"));
      data.add(map.get("calcedFontSize"));
      data.add(map.get("text"));
      Gson gson=new Gson();
      mapAnn.put("data",gson.toJson(data));
      jedis.rpush("meeting-" + meetingID + "-presentation-"+ map.get("presentationID")+ "-page-"+ map.get("pageNumber")+ "-currentshapes",shapeID);
      jedis.hmset("meeting-" + meetingID + "-presentation-"+ map.get("presentationID")+ "-page-"+ map.get("pageNumber")+ "-shape-"+ shapeID,mapAnn);
      messagingService.dropRedisClient(jedis);
    }
  }
 else {
    log.debug("checking annotation: " + an.getAnnotation().toString());
  }
}

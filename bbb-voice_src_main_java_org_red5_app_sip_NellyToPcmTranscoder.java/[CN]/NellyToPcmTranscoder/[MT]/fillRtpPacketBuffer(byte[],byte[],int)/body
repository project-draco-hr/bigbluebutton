{
  int copyingSize=0;
  int finalCopySize=0;
  byte[] codedBuffer=new byte[sipCodec.getOutgoingEncodedFrameSize()];
  try {
    if ((tempBufferRemaining + encodingOffset) >= sipCodec.getOutgoingDecodedFrameSize()) {
      copyingSize=encodingBuffer.length - encodingOffset;
      System.arraycopy(tempBuffer,tempBuffer.length - tempBufferRemaining,encodingBuffer,encodingOffset,copyingSize);
      encodingOffset=sipCodec.getOutgoingDecodedFrameSize();
      tempBufferRemaining-=copyingSize;
      finalCopySize=sipCodec.getOutgoingDecodedFrameSize();
    }
 else {
      if (tempBufferRemaining > 0) {
        BufferUtils.floatBufferIndexedCopy(encodingBuffer,encodingOffset,tempBuffer,tempBuffer.length - tempBufferRemaining,tempBufferRemaining);
        encodingOffset+=tempBufferRemaining;
        finalCopySize+=tempBufferRemaining;
        tempBufferRemaining=0;
      }
      asao_buffer_processed=true;
      ByteStream audioStream=new ByteStream(asaoBuffer,1,NELLYMOSER_ENCODED_PACKET_SIZE);
      decoderMap=decoder.decode(decoderMap,audioStream.bytes,1,tempBuffer,0);
      tempBufferRemaining=tempBuffer.length;
      if (tempBuffer.length <= 0) {
        log.error("Asao decoder Error.");
      }
      if ((encodingOffset + tempBufferRemaining) > sipCodec.getOutgoingDecodedFrameSize()) {
        copyingSize=encodingBuffer.length - encodingOffset;
      }
 else {
        copyingSize=tempBufferRemaining;
      }
      BufferUtils.floatBufferIndexedCopy(encodingBuffer,encodingOffset,tempBuffer,0,copyingSize);
      encodingOffset+=copyingSize;
      tempBufferRemaining-=copyingSize;
      finalCopySize+=copyingSize;
    }
    if (encodingOffset == encodingBuffer.length) {
      int encodedBytes=sipCodec.pcmToCodec(encodingBuffer,codedBuffer);
      if (encodedBytes == sipCodec.getOutgoingEncodedFrameSize()) {
        BufferUtils.byteBufferIndexedCopy(transcodedData,dataOffset,codedBuffer,0,codedBuffer.length);
      }
 else {
      }
    }
  }
 catch (  Exception e) {
    log.error("Exception - " + e.toString());
    e.printStackTrace();
  }
  return finalCopySize;
}

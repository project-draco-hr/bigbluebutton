{
  log.debug("Processing event for room: " + event.getRoom());
  RoomImp rm=rooms.get(event.getRoom());
  if (rm == null) {
    log.info("Processing event for non-existing room: " + event.getRoom());
    return;
  }
  if (event instanceof ParticipantJoinedEvent) {
    log.debug("Processing ParticipantJoinedEvent for room: " + event.getRoom());
    ParticipantJoinedEvent pje=(ParticipantJoinedEvent)event;
    ParticipantImp p=new ParticipantImp(pje.getParticipantId(),pje.getCallerIdName());
    p.setMuted(pje.getMuted());
    p.setTalking(pje.getSpeaking());
    log.debug("Joined [" + p.getId() + ","+ p.getName()+ ","+ p.isMuted()+ ","+ p.isTalking()+ "] to room "+ rm.getName());
    rm.add(p);
    if ((rm.numParticipants() == 1) && (rm.record())) {
      rm.recording(true);
      log.debug("Starting recording of voice conference");
      confService.recordSession(event.getRoom(),rm.getMeeting());
    }
    if (rm.isMuted() && !p.isMuted()) {
      confService.mute(p.getId(),event.getRoom(),true);
    }
  }
 else   if (event instanceof ParticipantLeftEvent) {
    log.debug("Processing ParticipantLeftEvent for room: " + event.getRoom());
    rm.remove(event.getParticipantId());
    if ((rm.numParticipants() == 0) && (rm.record())) {
      log.debug("Stopping recording of voice conference");
      rm.recording(false);
    }
  }
 else   if (event instanceof ParticipantMutedEvent) {
    log.debug("Processing ParticipantMutedEvent for room: " + event.getRoom());
    ParticipantMutedEvent pme=(ParticipantMutedEvent)event;
    ParticipantImp p=(ParticipantImp)rm.getParticipant(event.getParticipantId());
    if (p != null)     p.setMuted(pme.isMuted());
  }
 else   if (event instanceof ParticipantTalkingEvent) {
    log.debug("Processing ParticipantTalkingEvent for room: " + event.getRoom());
    ParticipantTalkingEvent pte=(ParticipantTalkingEvent)event;
    ParticipantImp p=(ParticipantImp)rm.getParticipant(event.getParticipantId());
    if (p != null)     p.setTalking(pte.isTalking());
  }
 else   if (event instanceof ParticipantLockedEvent) {
    ParticipantLockedEvent ple=(ParticipantLockedEvent)event;
    lockParticipant(ple.getRoom(),ple.getParticipantId(),ple.isLocked());
  }
 else {
    log.debug("Processing UnknowEvent " + event.getClass().getName() + " for room: "+ event.getRoom());
  }
}

{
  DeskshareMain dsMain=new DeskshareMain();
  CmdLineParser parser=new CmdLineParser();
  CmdLineParser.Option host=dsMain.addHelp(parser.addStringOption('s',"server"),serverHelpText);
  CmdLineParser.Option port=dsMain.addHelp(parser.addIntegerOption('p',"port"),"The port the application is listening");
  CmdLineParser.Option listenPort=dsMain.addHelp(parser.addIntegerOption('l',"listenPort"),"Port to listen for lifeline");
  CmdLineParser.Option room=dsMain.addHelp(parser.addStringOption('r',"room"),"Room");
  CmdLineParser.Option cWidth=dsMain.addHelp(parser.addIntegerOption('w',"captureWidth"),"Width of the screen capture");
  CmdLineParser.Option cHeight=dsMain.addHelp(parser.addIntegerOption('t',"captureHeight"),"Height of the screen capture");
  CmdLineParser.Option sWidth=dsMain.addHelp(parser.addIntegerOption('d',"scaleWidth"),"Scale capture width");
  CmdLineParser.Option sHeight=dsMain.addHelp(parser.addIntegerOption('g',"scaleHeight"),"Scale capture height");
  CmdLineParser.Option xCoord=dsMain.addHelp(parser.addIntegerOption('x',"x"),"Upper-left x coordinate of the screen capture");
  CmdLineParser.Option yCoord=dsMain.addHelp(parser.addIntegerOption('y',"y"),"Upper-left y coordinate of the screen capture");
  CmdLineParser.Option tryHttpTunnel=dsMain.addHelp(parser.addBooleanOption('n',"httptunnel"),"Http tunnel if direct connection fails");
  CmdLineParser.Option icon=dsMain.addHelp(parser.addStringOption('i',"icon"),"Path to system tray icon file");
  CmdLineParser.Option help=dsMain.addHelp(parser.addBooleanOption('h',"help"),"Show this help message");
  CmdLineParser.Option fullScreen=dsMain.addHelp(parser.addBooleanOption('f',"full-screen"),"Capture the full screen.");
  CmdLineParser.Option useSVC2=dsMain.addHelp(parser.addBooleanOption('2',"useSVC2"),"Use Screen Video V2.");
  try {
    parser.parse(args);
  }
 catch (  CmdLineParser.OptionException e) {
    System.err.println(e.getMessage());
    dsMain.printUsage();
    System.exit(2);
  }
  if (Boolean.TRUE.equals(parser.getOptionValue(help))) {
    dsMain.printUsage();
    System.exit(0);
  }
  String hostValue=(String)parser.getOptionValue(host,"localhost");
  Integer portValue=(Integer)parser.getOptionValue(port,new Integer(9123));
  Integer listenPortValue=(Integer)parser.getOptionValue(listenPort,new Integer(9125));
  String roomValue=(String)parser.getOptionValue(room,"85115");
  Integer cWidthValue=(Integer)parser.getOptionValue(cWidth,new Integer(800));
  Integer cHeightValue=(Integer)parser.getOptionValue(cHeight,new Integer(600));
  Integer sWidthValue=(Integer)parser.getOptionValue(sWidth,new Integer(800));
  Integer sHeightValue=(Integer)parser.getOptionValue(sHeight,new Integer(600));
  Integer xValue=(Integer)parser.getOptionValue(xCoord,new Integer(0));
  Integer yValue=(Integer)parser.getOptionValue(yCoord,new Integer(0));
  Boolean tunnelValue=(Boolean)parser.getOptionValue(tryHttpTunnel,new Boolean(false));
  String iconValue=(String)parser.getOptionValue(icon,"bbb.gif");
  Boolean fullScreenValue=(Boolean)parser.getOptionValue(fullScreen,new Boolean(false));
  Boolean useSVC2Value=(Boolean)parser.getOptionValue(useSVC2,new Boolean(false));
  Image image=Toolkit.getDefaultToolkit().getImage(iconValue);
  lifeline=new LifeLine(listenPortValue.intValue(),dsMain);
  lifeline.listen();
  client=new DeskshareClient.NewBuilder().host(hostValue).port(portValue).room(roomValue).captureWidth(cWidthValue).captureHeight(cHeightValue).scaleWidth(sWidthValue).scaleHeight(sHeightValue).quality(true).autoScale(0).x(xValue).y(yValue).fullScreen(fullScreenValue).useSVC2(useSVC2Value).httpTunnel(tunnelValue).trayIcon(image).enableTrayIconActions(true).build();
  client.addClientListener(dsMain);
  client.start();
  try {
    System.out.println("Waiting for trigger to Stop client.");
    ExitCode reason=dsMain.exitReasonQ.take();
    System.out.println("Stopping client.");
    client.stop();
    lifeline.disconnect();
    System.exit(reason.getExitCode());
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
    System.exit(500);
  }
}

{
  if (this.pendingMessages.isEmpty()) {
    this.noPendingMessages+=1;
    if (this.noPendingMessages > INCREASE_POLLING_DELAY_COUNT) {
      if (this.pollingDelay == 0) {
        this.pollingDelay=1;
      }
      this.pollingDelay=(byte)(this.pollingDelay * 2);
      if (this.pollingDelay > MAX_POLLING_DELAY) {
        this.pollingDelay=MAX_POLLING_DELAY;
      }
    }
    return null;
  }
  ByteBuffer result=ByteBuffer.allocate(2048);
  result.setAutoExpand(true);
  if (log.isDebugEnabled()) {
    log.debug("Returning " + this.pendingMessages.size() + " messages to client.");
  }
  this.noPendingMessages=0;
  this.pollingDelay=INITIAL_POLLING_DELAY;
  while (result.limit() < targetSize) {
    if (this.pendingMessages.isEmpty()) {
      break;
    }
synchronized (this.pendingMessages) {
      for (      ByteBuffer buffer : this.pendingMessages) {
        result.put(buffer);
        buffer.release();
      }
      this.pendingMessages.clear();
    }
    List<Object> toNotify=new LinkedList<Object>();
synchronized (this.notifyMessages) {
      toNotify.addAll(this.notifyMessages);
      this.notifyMessages.clear();
    }
    for (    Object message : toNotify) {
      try {
        handler.messageSent(this,message);
      }
 catch (      Exception e) {
        log.error("Could not notify stream subsystem about sent message.",e);
        continue;
      }
    }
  }
  result.flip();
  writtenBytes+=result.limit();
  return result;
}

{
  int packetLength=0;
  int headerOffset=0;
  int payloadLength=0;
  if (rtpSocket == null) {
    println("run","RTP socket is null.");
    return;
  }
  encoder=new Encoder();
  encoderMap=new float[64];
  tempBuffer=new float[NELLYMOSER_DECODED_PACKET_SIZE];
  byte[] internalBuffer=new byte[sipCodec.getIncomingEncodedFrameSize() + RTP_HEADER_SIZE];
  RtpPacket rtpPacket=new RtpPacket(internalBuffer,0);
  running=true;
  try {
    rtpSocket.getDatagramSocket().setSoTimeout(SO_TIMEOUT);
    while (running) {
      try {
        rtpSocket.receive(rtpPacket);
        frameCounter++;
        if (running) {
          byte[] packetBuffer=rtpPacket.getPacket();
          int offset=rtpPacket.getHeaderLength();
          int length=rtpPacket.getPayloadLength();
          packetLength=packetBuffer.length;
          headerOffset=offset;
          payloadLength=length;
          float[] decodingBuffer=new float[length];
          byte[] codedBuffer=new byte[length];
          BufferUtils.byteBufferIndexedCopy(codedBuffer,0,packetBuffer,offset,length);
          int decodedBytes=sipCodec.codecToPcm(codedBuffer,decodingBuffer);
          if (decodedBytes == sipCodec.getIncomingDecodedFrameSize()) {
            forwardAudioToFlashPlayer(decodingBuffer);
          }
 else {
            println("fillRtpPacketBuffer","Failure decoding buffer.");
          }
        }
      }
 catch (      java.io.InterruptedIOException e) {
      }
    }
  }
 catch (  Exception e) {
    running=false;
    println("run",sipCodec.getCodecName());
    println("run","pkt.length = " + packetLength + ", offset = "+ headerOffset+ ", length = "+ payloadLength+ ".");
    println("Exception - ",e.toString());
    e.printStackTrace();
  }
  DatagramSocket socket=rtpSocket.getDatagramSocket();
  rtpSocket.close();
  if (socketIsLocal && socket != null) {
    socket.close();
  }
  rtpSocket=null;
  println("run","Terminated.");
  println("run","Frames = " + frameCounter + ".");
}

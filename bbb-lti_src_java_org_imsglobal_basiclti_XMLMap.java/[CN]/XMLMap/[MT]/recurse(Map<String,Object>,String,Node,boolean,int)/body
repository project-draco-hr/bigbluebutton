{
  doDebug(d,"> recurse path=" + path + " parentNode="+ nodeToString(parentNode));
  d++;
  NodeList nl=parentNode.getChildNodes();
  NamedNodeMap nm=parentNode.getAttributes();
  int nodeCount=0;
  String value=null;
  if (nl != null)   for (int i=0; i < nl.getLength(); i++) {
    Node node=nl.item(i);
    if (node.getNodeType() == node.TEXT_NODE) {
      value=node.getNodeValue();
      if (value == null)       break;
      if (value.trim().length() < 1)       break;
      tm.put(path,node.getNodeValue());
      break;
    }
  }
  if (nm != null)   for (int i=0; i < nm.getLength(); i++) {
    Node node=nm.item(i);
    if (node.getNodeType() == node.ATTRIBUTE_NODE) {
      String name=node.getNodeName();
      value=node.getNodeValue();
      if (name == null || name.trim().length() < 1 || value == null || value.trim().length() < 1)       continue;
      String newPath=path + "!" + name;
      tm.put(newPath,value);
    }
  }
  if (!doFull) {
    Set<String> done=new HashSet<String>();
    if (nl != null)     for (int i=0; i < nl.getLength(); i++) {
      Node node=nl.item(i);
      if (node.getNodeType() == node.ELEMENT_NODE && (!done.contains(node.getNodeName()))) {
        doDebug(d,"Going down the rabbit hole path=" + path + " node="+ node.getNodeName());
        recurse(tm,addSlash(path) + node.getNodeName(),node,doFull,d);
        doDebug(d,"Back from the rabbit hole path=" + path + " node="+ node.getNodeName());
        done.add(node.getNodeName());
      }
    }
    d--;
    doDebug(d,"< recurse path=" + path + " parentNode="+ nodeToString(parentNode));
    return;
  }
  Map<String,Integer> childMap=new TreeMap<String,Integer>();
  if (nl != null)   for (int i=0; i < nl.getLength(); i++) {
    Node node=nl.item(i);
    if (node.getNodeType() == node.ELEMENT_NODE) {
      Integer count=childMap.get(node.getNodeName());
      if (count == null)       count=new Integer(0);
      count=count + 1;
      childMap.put(node.getNodeName(),count);
    }
  }
  if (childMap.size() < 1)   return;
  Iterator<String> iter=childMap.keySet().iterator();
  Map<String,List<Map<String,Object>>> nodeMap=new TreeMap<String,List<Map<String,Object>>>();
  while (iter.hasNext()) {
    String nextChild=iter.next();
    if (nextChild == null)     continue;
    Integer count=childMap.get(nextChild);
    if (count == null)     continue;
    if (count < 2)     continue;
    doDebug(d,"Making a List for " + nextChild);
    List<Map<String,Object>> newList=new ArrayList<Map<String,Object>>();
    nodeMap.put(nextChild,newList);
  }
  if (nl != null)   for (int i=0; i < nl.getLength(); i++) {
    Node node=nl.item(i);
    if (node.getNodeType() == node.ELEMENT_NODE) {
      String childName=node.getNodeName();
      if (childName == null)       continue;
      List<Map<String,Object>> mapList=nodeMap.get(childName);
      if (mapList == null) {
        doDebug(d,"Going down the single rabbit hole path=" + path + " node="+ node.getNodeName());
        recurse(tm,addSlash(path) + node.getNodeName(),node,doFull,d);
        doDebug(d,"Back from the single rabbit hole path=" + path + " node="+ node.getNodeName());
      }
 else {
        doDebug(d,"Going down the multi rabbit hole path=" + path + " node="+ node.getNodeName());
        Map<String,Object> newMap=new TreeMap<String,Object>();
        recurse(newMap,"/",node,doFull,d);
        doDebug(d,"Back from the multi rabbit hole path=" + path + " node="+ node.getNodeName()+ " map="+ newMap);
        if (newMap.size() > 0)         mapList.add(newMap);
      }
    }
  }
  Iterator<String> iter2=nodeMap.keySet().iterator();
  while (iter2.hasNext()) {
    String nextChild=iter2.next();
    if (nextChild == null)     continue;
    List<Map<String,Object>> newList=nodeMap.get(nextChild);
    if (newList == null)     continue;
    if (newList.size() < 1)     continue;
    doDebug(d,"Adding sub-map name=" + nextChild + " list="+ newList);
    tm.put(path + "/" + nextChild,newList);
  }
  d--;
  doDebug(d,"< recurse path=" + path + " parentNode="+ nodeToString(parentNode));
}

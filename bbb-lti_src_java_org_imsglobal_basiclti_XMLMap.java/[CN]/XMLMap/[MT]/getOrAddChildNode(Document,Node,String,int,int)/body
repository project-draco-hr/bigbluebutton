{
  doDebug(d,"> getOrAddChildNode name=" + nodeName + "@"+ whichNode+ " parentNode="+ nodeToString(parentNode));
  d++;
  if (nodeName == null || parentNode == null)   return null;
  int begpos=nodeName.indexOf('[');
  int endpos=nodeName.indexOf(']');
  if (begpos > 0 && endpos > begpos && endpos < nodeName.length()) {
    String indStr=nodeName.substring(begpos + 1,endpos);
    doDebug(d,"Index String = " + indStr);
    nodeName=nodeName.substring(0,begpos);
    doDebug(d,"New Nodename=" + nodeName);
    Integer iVal=new Integer(indStr);
    doDebug(d,"Integer = " + iVal);
    whichNode=iVal;
  }
  NodeList nl=parentNode.getChildNodes();
  int foundNodes=-1;
  if (nl != null)   for (int i=0; i < nl.getLength(); i++) {
    Node node=nl.item(i);
    if (node.getNodeType() == node.ELEMENT_NODE) {
      if (nodeName.equals(node.getNodeName())) {
        foundNodes++;
        d--;
        doDebug(d,"< getOrAddChildNode found name=" + nodeToString(node));
        doDebug(d,"foundNodes = " + foundNodes + " looking for node="+ whichNode);
        if (foundNodes >= whichNode)         return node;
      }
    }
  }
  Element newNode=null;
  while (foundNodes < whichNode) {
    foundNodes++;
    doDebug(d,"Adding node at position " + foundNodes + " moving toward "+ whichNode);
    if (nodeName == null)     continue;
    newNode=doc.createElement(nodeName);
    doDebug(d,"Adding " + nodeName + " at "+ nodeToString(parentNode)+ " in "+ doc);
    parentNode.appendChild(newNode);
    doDebug(d,"xml=" + documentToString(doc,false));
    doDebug(d,"getOrAddChildNode added newnode=" + nodeToString(newNode));
  }
  d--;
  doDebug(d,"< getOrAddChildNode added newnode=" + nodeToString(newNode));
  return newNode;
}

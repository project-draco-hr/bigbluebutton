from lxml import etree
import subprocess
print 'Loading events.xml'
tree = etree.parse('workspace/event.xml')
r = tree.xpath('/events/event')
begin = r[0].get('timestamp')
end = r[(len(r) - 1)].get('timestamp')
length = (long(end) - long(begin))
proc = subprocess.Popen('ls workspace/audio/*.wav | wc -l', shell=True, stdout=subprocess.PIPE)
num_files = proc.communicate()[0]
audio_recs = []
audio_recs_dict = {}
start_rec_events = tree.xpath("//event[@name='StartRecordingEvent']")
for evt in start_rec_events:
    e = AudioRecEvents()
    e.filename = evt.find('filename').text
    e.start_timestamp = evt.find('recordingTimestamp').text
    e.start_event_timestamp = evt.get('timestamp')
    audio_recs.append(e)
    audio_recs_dict[e.filename] = e
stop_rec_events = tree.xpath("//event[@name='StopRecordingEvent']")
num_stop_rec = len(stop_rec_events)
print num_stop_rec
for evt in stop_rec_events:
    rec = audio_recs_dict[evt.find('filename').text]
    rec.stop_timestamp = evt.find('recordingTimestamp').text
    rec.stop_event_timestamp = evt.get('timestamp')
audio_gaps = []
prev = long(begin)
for e in audio_recs:
    length = (long(e.stop_timestamp) - long(e.start_timestamp))
    audio_gap = (long(e.start_event_timestamp) - prev)
    audio_gaps.append(audio_gap)
    prev = long(e.stop_event_timestamp)
audio_gaps.append((long(end) - long(prev)))
for g in audio_gaps:
    lsec = (g / 1000)
    print ((str(lsec) + ' ') + str(g))
    create_audio_gap_file(lsec, ('gap-' + str(lsec)))

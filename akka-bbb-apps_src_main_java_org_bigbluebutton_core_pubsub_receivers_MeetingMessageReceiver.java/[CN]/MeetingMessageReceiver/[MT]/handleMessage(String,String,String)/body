{
  if (channel.equalsIgnoreCase(MessagingConstants.TO_MEETING_CHANNEL)) {
    JsonParser parser=new JsonParser();
    JsonObject obj=(JsonObject)parser.parse(message);
    if (obj.has("header") && obj.has("payload")) {
      JsonObject header=(JsonObject)obj.get("header");
      if (header.has("name")) {
        String messageName=header.get("name").getAsString();
        if (CreateMeetingRequest.NAME.equals(messageName)) {
          Gson gson=new Gson();
          CreateMeetingRequest msg=gson.fromJson(message,CreateMeetingRequest.class);
          bbbGW.handleBigBlueButtonMessage(msg);
        }
 else         if (CreateBreakoutRoomsRequest.NAME.equals(messageName)) {
          Gson gson=new Gson();
          CreateBreakoutRoomsRequest msg=gson.fromJson(message,CreateBreakoutRoomsRequest.class);
          bbbGW.handleBigBlueButtonMessage(msg);
        }
 else         if (ListenInOnBreakout.NAME.equals(messageName)) {
          Gson gson=new Gson();
          ListenInOnBreakout msg=gson.fromJson(message,ListenInOnBreakout.class);
          bbbGW.handleBigBlueButtonMessage(msg);
        }
 else         if (RequestBreakoutJoinURL.NAME.equals(messageName)) {
          Gson gson=new Gson();
          RequestBreakoutJoinURL msg=gson.fromJson(message,RequestBreakoutJoinURL.class);
          bbbGW.handleBigBlueButtonMessage(msg);
        }
      }
    }
    IBigBlueButtonMessage msg=MessageFromJsonConverter.convert(message);
    if (msg != null) {
      if (msg instanceof EndMeetingMessage) {
        EndMeetingMessage emm=(EndMeetingMessage)msg;
        bbbGW.endMeeting(emm.meetingId);
      }
 else       if (msg instanceof RegisterUserMessage) {
        RegisterUserMessage emm=(RegisterUserMessage)msg;
        bbbGW.registerUser(emm.meetingID,emm.internalUserId,emm.fullname,emm.role,emm.externUserID,emm.authToken);
      }
 else       if (msg instanceof DestroyMeetingMessage) {
        DestroyMeetingMessage emm=(DestroyMeetingMessage)msg;
        bbbGW.destroyMeeting(emm.meetingId);
      }
 else       if (msg instanceof ValidateAuthTokenMessage) {
        ValidateAuthTokenMessage emm=(ValidateAuthTokenMessage)msg;
        String sessionId="tobeimplemented";
        bbbGW.validateAuthToken(emm.meetingId,emm.userId,emm.token,emm.replyTo,sessionId);
      }
 else       if (msg instanceof UserConnectedToGlobalAudio) {
        UserConnectedToGlobalAudio emm=(UserConnectedToGlobalAudio)msg;
        Map<String,Object> logData=new HashMap<String,Object>();
        logData.put("voiceConf",emm.voiceConf);
        logData.put("userId",emm.userid);
        logData.put("username",emm.name);
        logData.put("event","user_connected_to_global_audio");
        logData.put("description","User connected to global audio.");
        Gson gson=new Gson();
        String logStr=gson.toJson(logData);
        bbbGW.userConnectedToGlobalAudio(emm.voiceConf,emm.userid,emm.name);
      }
 else       if (msg instanceof UserDisconnectedFromGlobalAudio) {
        UserDisconnectedFromGlobalAudio emm=(UserDisconnectedFromGlobalAudio)msg;
        Map<String,Object> logData=new HashMap<String,Object>();
        logData.put("voiceConf",emm.voiceConf);
        logData.put("userId",emm.userid);
        logData.put("username",emm.name);
        logData.put("event","user_disconnected_from_global_audio");
        logData.put("description","User disconnected from global audio.");
        Gson gson=new Gson();
        String logStr=gson.toJson(logData);
        bbbGW.userDisconnectedFromGlobalAudio(emm.voiceConf,emm.userid,emm.name);
      }
 else       if (msg instanceof GetAllMeetingsRequest) {
        GetAllMeetingsRequest emm=(GetAllMeetingsRequest)msg;
        bbbGW.getAllMeetings("no_need_of_a_meeting_id");
      }
 else {
        System.out.println("Unknown message: [" + message + "]");
      }
    }
 else {
      System.out.println("Failed to decode message: [" + message + "]");
    }
  }
 else   if (channel.equalsIgnoreCase(MessagingConstants.TO_SYSTEM_CHANNEL)) {
    JsonParser parser=new JsonParser();
    JsonObject obj=(JsonObject)parser.parse(message);
    if (obj.has("header") && obj.has("payload")) {
      JsonObject header=(JsonObject)obj.get("header");
      if (header.has("name")) {
        String messageName=header.get("name").getAsString();
        if (PubSubPingMessage.PUBSUB_PING.equals(messageName)) {
          Gson gson=new Gson();
          PubSubPingMessage msg=gson.fromJson(message,PubSubPingMessage.class);
          bbbGW.handleBigBlueButtonMessage(msg);
        }
 else {
          IBigBlueButtonMessage msg=MessageFromJsonConverter.convert(message);
          if (msg != null) {
            if (msg instanceof KeepAliveMessage) {
              KeepAliveMessage emm=(KeepAliveMessage)msg;
              bbbGW.isAliveAudit(emm.keepAliveId);
            }
          }
 else {
            System.out.println("Unknown message: [" + message + "]");
          }
        }
      }
    }
  }
}

{
  Output output=new org.red5.io.amf.Output(out);
  final IServiceCall call=invoke.getCall();
  final boolean isPending=(call.getStatus() == Call.STATUS_PENDING);
  if (!isPending) {
    if (log.isDebugEnabled()) {
      log.debug("Call has been executed, send result");
    }
    serializer.serialize(output,call.isSuccess() ? "_result" : "_error");
  }
 else {
    if (log.isDebugEnabled()) {
      log.debug("This is a pending call, send request");
    }
    final String action=(call.getServiceName() == null) ? call.getServiceMethodName() : call.getServiceName() + '.' + call.getServiceMethodName();
    serializer.serialize(output,action);
  }
  if (invoke instanceof Invoke) {
    serializer.serialize(output,Integer.valueOf(invoke.getInvokeId()));
    serializer.serialize(output,invoke.getConnectionParams());
  }
  if (call.getServiceName() == null && "connect".equals(call.getServiceMethodName())) {
    output=new org.red5.io.amf.Output(out);
  }
 else {
    if (rtmp.getEncoding() == Encoding.AMF3) {
      output=new org.red5.io.amf3.Output(out);
    }
 else {
      output=new org.red5.io.amf.Output(out);
    }
  }
  if (!isPending && (invoke instanceof Invoke)) {
    IPendingServiceCall pendingCall=(IPendingServiceCall)call;
    if (!call.isSuccess()) {
      StatusObject status=generateErrorResult(StatusCodes.NC_CALL_FAILED,call.getException());
      pendingCall.setResult(status);
    }
    if (log.isDebugEnabled()) {
      log.debug("Writing result: " + pendingCall.getResult());
    }
    serializer.serialize(output,pendingCall.getResult());
  }
 else {
    if (log.isDebugEnabled()) {
      log.debug("Writing params");
    }
    final Object[] args=invoke.getCall().getArguments();
    if (args != null) {
      for (      Object element : args) {
        serializer.serialize(output,element);
      }
    }
  }
}

{
  String action=event.getEventHeaders().get("Action");
  if (action == null) {
    return;
  }
  System.out.println("Handling conferenceEventRecord " + action);
  System.out.println("\n\n\nAAAAAAAAAAAAAAAAAAA " + isRTMPStream(event) + "\n\n\n");
  if (action.equals(START_RECORDING_EVENT)) {
    if (confName.endsWith(DESKSHARE_CONFERENCE_NAME_SUFFIX)) {
      if (isRTMPStream(event)) {
        DeskShareRTMPBroadcastEvent rtmp=new DeskShareRTMPBroadcastEvent(confName,true);
        rtmp.setChannels(Integer.parseInt(getBroadcastParameter(event,"channels")));
        rtmp.setFramesPerSecond(Double.parseDouble(getBroadcastParameter(event,"fps")));
        rtmp.setVideoHeight(Integer.parseInt(getBroadcastParameter(event,"vh")));
        rtmp.setVideoWidth(Integer.parseInt(getBroadcastParameter(event,"vw")));
        rtmp.setSampleRate(Integer.parseInt(getBroadcastParameter(event,"samplerate")));
        rtmp.setRecordingStreamUrl(getStreamUrl(event));
        rtmp.setTimestamp(genTimestamp().toString());
        System.out.println("DeskShare conference broadcast started. url=[" + getStreamUrl(event) + "], conf=["+ confName+ "]");
        conferenceEventListener.handleConferenceEvent((VoiceConferenceEvent)rtmp);
      }
 else {
        DeskShareRecordingEvent dssre=new DeskShareRecordingEvent(confName,true);
        dssre.setRecordingFilename(getRecordFilenameFromEvent(event));
        dssre.setTimestamp(genTimestamp().toString());
        System.out.println("DeskShare conference recording started. file=[" + getRecordFilenameFromEvent(event) + "], conf=["+ confName+ "]");
        conferenceEventListener.handleConferenceEvent((VoiceConferenceEvent)dssre);
      }
    }
 else {
      VoiceStartRecordingEvent sre=new VoiceStartRecordingEvent(confName,true);
      sre.setRecordingFilename(getRecordFilenameFromEvent(event));
      sre.setTimestamp(genTimestamp().toString());
      System.out.println("Voice conference recording started. file=[" + getRecordFilenameFromEvent(event) + "], conf=["+ confName+ "]");
      conferenceEventListener.handleConferenceEvent(sre);
    }
  }
 else   if (action.equals(STOP_RECORDING_EVENT)) {
    if (confName.endsWith(DESKSHARE_CONFERENCE_NAME_SUFFIX)) {
      if (isRTMPStream(event)) {
        DeskShareRTMPBroadcastEvent rtmp=new DeskShareRTMPBroadcastEvent(confName,false);
        rtmp.setChannels(Integer.parseInt(getBroadcastParameter(event,"channels")));
        rtmp.setFramesPerSecond(Double.parseDouble(getBroadcastParameter(event,"fps")));
        rtmp.setVideoHeight(Integer.parseInt(getBroadcastParameter(event,"vh")));
        rtmp.setVideoWidth(Integer.parseInt(getBroadcastParameter(event,"vw")));
        rtmp.setSampleRate(Integer.parseInt(getBroadcastParameter(event,"samplerate")));
        rtmp.setRecordingStreamUrl(getStreamUrl(event));
        rtmp.setTimestamp(genTimestamp().toString());
        System.out.println("DeskShare conference broadcast stopped. url=[" + getStreamUrl(event) + "], conf=["+ confName+ "]");
        conferenceEventListener.handleConferenceEvent((VoiceConferenceEvent)rtmp);
      }
 else {
        DeskShareRecordingEvent dssre=new DeskShareRecordingEvent(confName,false);
        dssre.setRecordingFilename(getRecordFilenameFromEvent(event));
        dssre.setTimestamp(genTimestamp().toString());
        System.out.println("DeskShare conference recording stopped. file=[" + getRecordFilenameFromEvent(event) + "], conf=["+ confName+ "]");
        conferenceEventListener.handleConferenceEvent((VoiceConferenceEvent)dssre);
      }
    }
 else {
      VoiceStartRecordingEvent sre=new VoiceStartRecordingEvent(confName,false);
      sre.setRecordingFilename(getRecordFilenameFromEvent(event));
      sre.setTimestamp(genTimestamp().toString());
      System.out.println("Voice conference recording stopped. file=[" + getRecordFilenameFromEvent(event) + "], conf=["+ confName+ "]");
      conferenceEventListener.handleConferenceEvent(sre);
    }
  }
 else {
    System.out.println("Processing UNKNOWN conference Action " + action + "]");
  }
}

{
  Integer memberId=this.getMemberIdFromEvent(event);
  Map<String,String> headers=event.getEventHeaders();
  String callerId=this.getCallerIdFromEvent(event);
  String callerIdName=this.getCallerIdNameFromEvent(event);
  boolean muted=headers.get("Speak").equals("true") ? false : true;
  boolean speaking=headers.get("Talking").equals("true") ? true : false;
  String voiceUserId=callerIdName;
  System.out.println("******************** Received Conference Join Event from FreeSWITCH user[" + callerIdName + "]");
  Matcher gapMatcher=GLOBAL_AUDION_PATTERN.matcher(callerIdName);
  if (gapMatcher.matches()) {
    log.debug("Ignoring GLOBAL AUDIO USER [{}]",callerIdName);
    return;
  }
  Matcher matcher=CALLERNAME_PATTERN.matcher(callerIdName);
  if (matcher.matches()) {
    voiceUserId=matcher.group(1).trim();
    callerIdName=matcher.group(2).trim();
  }
  VoiceUserJoinedEvent pj=new VoiceUserJoinedEvent(voiceUserId,memberId.toString(),confName,callerId,callerIdName,muted,speaking);
  conferenceEventListener.handleConferenceEvent(pj);
}

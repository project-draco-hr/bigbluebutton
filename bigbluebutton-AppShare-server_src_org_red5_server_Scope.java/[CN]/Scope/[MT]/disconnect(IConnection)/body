{
  final IClient client=conn.getClient();
  if (client == null) {
    removeEventListener(conn);
    connectionStats.decrement();
    if (hasParent()) {
      parent.disconnect(conn);
    }
    return;
  }
  final Set<IConnection> conns=clients.get(client);
  if (conns != null) {
    conns.remove(conn);
    IScopeHandler handler=null;
    if (hasHandler()) {
      handler=getHandler();
      try {
        handler.disconnect(conn,this);
      }
 catch (      Exception e) {
        log.error("Error while executing \"disconnect\" for connection {} on handler {}. {}",new Object[]{conn,handler,e});
      }
    }
    if (conns.isEmpty()) {
      clients.remove(client);
      clientStats.decrement();
      if (handler != null) {
        try {
          handler.leave(client,this);
        }
 catch (        Exception e) {
          log.error("Error while executing \"leave\" for client {} on handler {}. {}",new Object[]{conn,handler,e});
        }
      }
    }
    removeEventListener(conn);
    connectionStats.decrement();
    if (this.equals(conn.getScope())) {
      final IServer server=getServer();
      if (server instanceof Server) {
        ((Server)server).notifyDisconnected(conn);
      }
    }
  }
  if (hasParent()) {
    parent.disconnect(conn);
  }
}

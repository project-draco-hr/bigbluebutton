{
  if (null != servletContext) {
    return;
  }
  instance=this;
  System.setProperty("red5.deployment.type","war");
  myClassloader=getClass().getClassLoader();
  servletContext=sce.getServletContext();
  String prefix=servletContext.getRealPath("/");
  servletContext.setAttribute("root.classloader",myClassloader);
  initRegistry(servletContext);
  long time=System.currentTimeMillis();
  logger.info("RED5 Server (http://www.osflash.org/red5)");
  logger.info("Root context loader");
  logger.debug("Path: " + prefix);
  try {
    ContextLoader loader=createContextLoader();
    applicationContext=(ConfigurableWebApplicationContext)loader.initWebApplicationContext(servletContext);
    logger.debug("Root context path: " + applicationContext.getServletContext().getContextPath());
    ConfigurableBeanFactory factory=applicationContext.getBeanFactory();
    factory.registerSingleton("default.context",applicationContext);
    parentFactory=(DefaultListableBeanFactory)factory.getParentBeanFactory();
    BeanFactoryReference beanfactoryRef=new ContextBeanFactoryReference(applicationContext);
    servletContext.setAttribute("bean.factory.ref",beanfactoryRef);
    servletContext.setAttribute("remoting.codec.factory",parentFactory.getBean("remotingCodecFactory"));
    server=(Server)parentFactory.getBean("red5.server");
    clientRegistry=(ClientRegistry)factory.getBean("global.clientRegistry");
    globalInvoker=(ServiceInvoker)factory.getBean("global.serviceInvoker");
    globalStrategy=(MappingStrategy)factory.getBean("global.mappingStrategy");
    global=(GlobalScope)factory.getBean("global.scope");
    logger.debug("GlobalScope: " + global);
    global.setServer(server);
    global.register();
    global.start();
    globalResolver=new ScopeResolver();
    globalResolver.setGlobalScope(global);
    logger.debug("About to grab Webcontext bean for Global");
    Context globalContext=(Context)factory.getBean("global.context");
    globalContext.setCoreBeanFactory(parentFactory);
    globalContext.setClientRegistry(clientRegistry);
    globalContext.setServiceInvoker(globalInvoker);
    globalContext.setScopeResolver(globalResolver);
    globalContext.setMappingStrategy(globalStrategy);
    logger.debug("About to grab Webcontext bean for ROOT");
    Context webContext=(Context)factory.getBean("web.context");
    webContext.setCoreBeanFactory(parentFactory);
    webContext.setClientRegistry(clientRegistry);
    webContext.setServiceInvoker(globalInvoker);
    webContext.setScopeResolver(globalResolver);
    webContext.setMappingStrategy(globalStrategy);
    WebScope scope=(WebScope)factory.getBean("web.scope");
    scope.setServer(server);
    scope.setParent(global);
    scope.register();
    scope.start();
    IRemotableList remote=(IRemotableList)Naming.lookup("rmi://localhost:" + rmiPort + "/subContextList");
    logger.debug("Children: " + remote.numChildren());
    if (remote.hasChildren()) {
      logger.debug("Children were detected");
      for (int i=0; i < remote.numChildren(); i++) {
        logger.debug("Enumerating children");
        WebSettings settings=remote.getAt(i);
        registerSubContext(settings.getWebAppKey());
      }
      logger.debug("End of children...");
    }
  }
 catch (  Throwable t) {
    logger.error("",t);
  }
 finally {
    timer=new Timer();
    checkScopeList=new CheckScopeListTask();
    timer.scheduleAtFixedRate(checkScopeList,1000,30000);
  }
  long startupIn=System.currentTimeMillis() - time;
  logger.info("Startup done in: " + startupIn + " ms");
}

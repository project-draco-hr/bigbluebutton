{
  JsonParser parser=new JsonParser();
  JsonObject obj=(JsonObject)parser.parse(message);
  if (obj.has("header") && obj.has("payload")) {
    JsonObject header=(JsonObject)obj.get("header");
    JsonObject payload=(JsonObject)obj.get("payload");
    if (header.has("name")) {
      String messageName=header.get("name").getAsString();
      if (SEND_PAGE_COUNT_ERROR.equals(messageName)) {
        if (payload.has(Constants.MEETING_ID) && payload.has(Constants.MESSAGE_KEY) && payload.has(Constants.CODE)&& payload.has(Constants.PRESENTATION_ID)&& payload.has(Constants.MAX_NUM_PAGES)&& payload.has(Constants.NUM_PAGES)&& payload.has(Constants.PRESENTATION_NAME)) {
          String meetingId=payload.get(Constants.MEETING_ID).getAsString();
          String messageKey=payload.get(Constants.MESSAGE_KEY).getAsString();
          String code=payload.get(Constants.CODE).getAsString();
          String presId=payload.get(Constants.PRESENTATION_ID).getAsString();
          int numberOfPages=payload.get(Constants.NUM_PAGES).getAsInt();
          int maxNumberPages=payload.get(Constants.MAX_NUM_PAGES).getAsInt();
          String presName=payload.get(Constants.PRESENTATION_NAME).getAsString();
          System.out.println("SendPageCountError fromJson");
          return new SendPageCountErrorMessage(messageKey,meetingId,code,presId,numberOfPages,maxNumberPages,presName);
        }
      }
    }
  }
  return null;
}

{
  log.debug("onSubmit {}",command);
  SystemWideSaltSource saltSource=(SystemWideSaltSource)daoAuthenticationProvider.getSaltSource();
  String salt=saltSource.getSystemWideSalt();
  UserDetails userDetails=(UserDetails)command;
  String username=userDetails.getUsername();
  String password=userDetails.getPassword();
  log.debug("User details: username={} password={}",username,password);
  PasswordGenerator passwordGenerator=new PasswordGenerator(password,salt);
  String hashedPassword=passwordGenerator.getPassword();
  log.debug("Password: {}",hashedPassword);
  try {
    Properties props=new Properties();
    log.debug("Context path: {}",getServletContext().getRealPath("/"));
    props.load(new FileInputStream(getServletContext().getRealPath("/") + userPropertiesLocation));
    log.debug("Number of current entries: {}",props.size());
    props.put(username,hashedPassword + ",ROLE_SUPERVISOR");
    if (props.size() > 0) {
      FileOutputStream fos=new FileOutputStream(getServletContext().getRealPath("/") + userPropertiesLocation);
      props.store(fos,"");
      fos.flush();
      fos.close();
    }
    GrantedAuthority[] auths=new GrantedAuthority[1];
    auths[0]=new GrantedAuthorityImpl("ROLE_SUPERVISOR");
    org.acegisecurity.userdetails.User usr=new org.acegisecurity.userdetails.User(username,hashedPassword,true,auths);
    daoAuthenticationProvider.getUserCache().putUserInCache(usr);
    try {
      daoAuthenticationProvider.getUserDetailsService().loadUserByUsername(username);
    }
 catch (    UsernameNotFoundException e) {
      log.debug("User {} not found",username);
    }
catch (    DataAccessException e) {
      log.error("{}",e);
    }
  }
 catch (  IOException e) {
    log.error("{}",e);
  }
  return new ModelAndView(new RedirectView(getSuccessView()));
}

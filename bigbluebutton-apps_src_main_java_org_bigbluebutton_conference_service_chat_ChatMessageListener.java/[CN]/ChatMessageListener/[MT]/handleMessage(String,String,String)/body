{
  if (channel.equalsIgnoreCase(MessagingConstants.ANTON_CHANNEL)) {
    System.out.println("AntonChannel=(chatlistener)" + channel);
    JsonParser parser=new JsonParser();
    JsonObject obj=(JsonObject)parser.parse(message);
    JsonObject headerObject=(JsonObject)obj.get("header");
    JsonObject payloadObject=(JsonObject)obj.get("payload");
    JsonObject messageObject=(JsonObject)payloadObject.get("message");
    Map<String,String> messageMap=new HashMap<String,String>();
    String toUsername=(String)messageObject.get("toUsername").toString();
    toUsername=toUsername.replace("\"","");
    messageMap.put("toUsername",toUsername);
    String toUserID=(String)messageObject.get("toUserID").toString();
    toUserID=toUserID.replace("\"","");
    messageMap.put("toUserID",toUserID);
    String fromUserID=(String)messageObject.get("fromUserID").toString();
    fromUserID=fromUserID.replace("\"","");
    messageMap.put("fromUserID",fromUserID);
    String fromColor=(String)messageObject.get("fromColor").toString();
    fromColor=fromColor.replace("\"","");
    messageMap.put("fromColor",fromColor);
    String fromTimezoneOffset=(String)messageObject.get("fromTimezoneOffset").toString();
    fromTimezoneOffset=fromTimezoneOffset.replace("\"","");
    messageMap.put("fromTimezoneOffset",fromTimezoneOffset);
    String fromTime=(String)messageObject.get("fromTime").toString();
    fromTime=fromTime.replace("\"","");
    messageMap.put("fromTime",fromTime);
    String chatType=(String)messageObject.get("chatType").toString();
    chatType=chatType.replace("\"","");
    messageMap.put("chatType",chatType);
    String messageText=(String)messageObject.get("message").toString();
    messageText=messageText.replace("\"","");
    messageMap.put("message",messageText);
    String fromLang=(String)messageObject.get("fromLang").toString();
    fromLang=fromLang.replace("\"","");
    messageMap.put("fromLang",fromLang);
    String fromUsername=(String)messageObject.get("fromUsername").toString();
    fromUsername=fromUsername.replace("\"","");
    messageMap.put("fromUsername",fromUsername);
    Map<String,Object> payload=new HashMap<String,Object>();
    payload.put("message",messageMap);
    String recorded=(String)payloadObject.get("recorded").toString();
    recorded=recorded.replace("\"","");
    payload.put("recorded",recorded);
    String meeting_id=(String)payloadObject.get("meeting_id").toString();
    meeting_id=meeting_id.replace("\"","");
    payload.put("meeting_id",meeting_id);
    String requester_id=(String)payloadObject.get("requester_id").toString();
    requester_id=requester_id.replace("\"","");
    payload.put("requester_id",requester_id);
    Map<String,Object> header=new HashMap<String,Object>();
    String timestamp=(String)headerObject.get("timestamp").toString();
    timestamp=timestamp.replace("\"","");
    header.put("timestamp",timestamp);
    String eventName=(String)headerObject.get("name").toString();
    eventName=eventName.replace("\"","");
    header.put("name",eventName);
    Map<String,Object> map=new HashMap<String,Object>();
    map.put("header",header);
    map.put("payload",payload);
    if (eventName.equalsIgnoreCase("public_chat_message_event") || eventName.equalsIgnoreCase("send_public_chat_message")) {
      System.out.println("I'm in the case for a public chat message");
    }
 else     if (eventName.equalsIgnoreCase("private_chat_message_event") || eventName.equalsIgnoreCase("send_private_chat_message")) {
      System.out.println("I'm in the case for a private chat message");
    }
  }
}

{
  Class<?> enclosingClass=Loader.getEnclosingClass(cls);
  while (!cls.isAnnotationPresent(org.bytedeco.javacpp.annotation.Properties.class) && !cls.isAnnotationPresent(Platform.class) && cls.getSuperclass() != null) {
    if (enclosingClass != null && cls.getSuperclass() == Object.class) {
      cls=enclosingClass;
      enclosingClass=null;
    }
 else {
      cls=cls.getSuperclass();
    }
  }
  org.bytedeco.javacpp.annotation.Properties classProperties=cls.getAnnotation(org.bytedeco.javacpp.annotation.Properties.class);
  if (classProperties != null) {
    Class[] classes=classProperties.inherit();
    String[] defaultNames=classProperties.names();
    Deque<Class> queue=new ArrayDeque<Class>(Arrays.asList(classes));
    while (queue.size() > 0 && (defaultNames == null || defaultNames.length == 0)) {
      Class<?> c=queue.removeFirst();
      org.bytedeco.javacpp.annotation.Properties p=c.getAnnotation(org.bytedeco.javacpp.annotation.Properties.class);
      if (p != null) {
        defaultNames=p.names();
        queue.addAll(Arrays.asList(p.inherit()));
      }
    }
    Platform[] platforms=classProperties.value();
    if (platforms != null) {
      for (      Platform p : platforms) {
        if (checkPlatform(p,defaultNames)) {
          return true;
        }
      }
    }
 else     if (classes != null) {
      for (      Class c : classes) {
        if (checkPlatform(c)) {
          return true;
        }
      }
    }
  }
 else   if (checkPlatform(cls.getAnnotation(Platform.class),null)) {
    return true;
  }
  return false;
}

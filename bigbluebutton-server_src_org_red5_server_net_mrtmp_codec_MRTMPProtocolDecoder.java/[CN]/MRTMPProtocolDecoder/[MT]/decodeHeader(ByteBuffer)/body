{
  short type=buffer.getShort();
  short bodyEncoding=buffer.getShort();
  int preserved=buffer.getInt();
  int clientId=buffer.getInt();
  int headerLength=buffer.getInt();
  int bodyLength=buffer.getInt();
  if (buffer.remaining() < headerLength - MRTMPPacket.COMMON_HEADER_LENGTH) {
    return null;
  }
  MRTMPPacket.Header header=null;
  if (type == MRTMPPacket.RTMP && headerLength != MRTMPPacket.RTMP_HEADER_LENGTH) {
    log.warn("Codec error: wrong RTMP header length " + headerLength);
    header=new MRTMPPacket.Header();
    buffer.skip(headerLength - MRTMPPacket.COMMON_HEADER_LENGTH);
  }
 else   if (type == MRTMPPacket.RTMP) {
    header=new MRTMPPacket.RTMPHeader();
    MRTMPPacket.RTMPHeader rtmpHeader=(MRTMPPacket.RTMPHeader)header;
    rtmpHeader.setRtmpType(buffer.getInt());
  }
 else {
    header=new MRTMPPacket.Header();
    buffer.skip(headerLength - MRTMPPacket.COMMON_HEADER_LENGTH);
  }
  header.setType(type);
  header.setBodyEncoding(bodyEncoding);
  header.setDynamic((preserved & 0x8000000) != 0);
  header.setClientId(clientId);
  header.setHeaderLength(headerLength);
  header.setBodyLength(bodyLength);
  return header;
}

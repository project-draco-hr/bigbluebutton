{
  if (!SipStack.isInit())   SipStack.init();
  via_addr=viaddr;
  if (via_addr == null || via_addr.equalsIgnoreCase(AUTO_CONFIGURATION))   via_addr=IpAddress.getLocalHostAddress().toString();
  host_port=port;
  if (host_port <= 0)   host_port=SipStack.default_port;
  host_ipaddr=null;
  if (ifaddr != null && !ifaddr.equalsIgnoreCase(ALL_INTERFACES)) {
    try {
      host_ipaddr=IpAddress.getByName(ifaddr);
    }
 catch (    IOException e) {
      e.printStackTrace();
      host_ipaddr=null;
    }
  }
  transport_protocols=protocols;
  if (transport_protocols == null)   transport_protocols=SipStack.default_transport_protocols;
  default_transport=transport_protocols[0];
  for (int i=0; i < transport_protocols.length; i++) {
    transport_protocols[i]=transport_protocols[i].toLowerCase();
    if (transport_protocols[i].equals(PROTO_UDP))     transport_udp=true;
 else     if (transport_protocols[i].equals(PROTO_TCP))     transport_tcp=true;
  }
  if (nmax_connections <= 0)   nmax_connections=SipStack.default_nmax_connections;
  if (outbound_port < 0)   outbound_port=SipStack.default_port;
  if (outbound_addr != null) {
    if (outbound_addr.equalsIgnoreCase(Configure.NONE) || outbound_addr.equalsIgnoreCase("NO-OUTBOUND"))     outbound_proxy=null;
 else     outbound_proxy=new SocketAddress(outbound_addr,outbound_port);
  }
  rport=SipStack.use_rport;
  force_rport=SipStack.force_rport;
  exception_listeners=new HashSet();
  listeners=new Hashtable();
  connections=new Hashtable();
}

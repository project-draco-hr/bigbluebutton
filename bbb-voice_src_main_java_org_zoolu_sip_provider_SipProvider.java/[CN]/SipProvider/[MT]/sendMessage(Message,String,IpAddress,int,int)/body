{
  ConnectionIdentifier conn_id=new ConnectionIdentifier(proto,dest_ipaddr,dest_port);
  if (log_all_packets || msg.getLength() > MIN_MESSAGE_LENGTH)   printLog("Sending message to " + conn_id,LogLevel.MEDIUM);
  if (transport_udp && proto.equals(PROTO_UDP)) {
    conn_id=null;
    try {
      udp.sendMessage(msg,dest_ipaddr,dest_port);
    }
 catch (    IOException e) {
      printException(e,LogLevel.HIGH);
      return null;
    }
  }
 else   if (transport_tcp && proto.equals(PROTO_TCP)) {
    if (!connections.containsKey(conn_id)) {
      printLog("no active connection found matching " + conn_id,LogLevel.MEDIUM);
      printLog("open " + proto + " connection to "+ dest_ipaddr+ ":"+ dest_port,LogLevel.MEDIUM);
      TcpTransport conn=null;
      try {
        conn=new TcpTransport(dest_ipaddr,dest_port,this);
      }
 catch (      Exception e) {
        printLog("connection setup FAILED",LogLevel.HIGH);
        return null;
      }
      printLog("connection " + conn + " opened",LogLevel.HIGH);
      addConnection(conn);
    }
 else {
      printLog("active connection found matching " + conn_id,LogLevel.MEDIUM);
    }
    ConnectedTransport conn=(ConnectedTransport)connections.get(conn_id);
    if (conn != null) {
      printLog("sending data through conn " + conn,LogLevel.MEDIUM);
      try {
        conn.sendMessage(msg);
        conn_id=new ConnectionIdentifier(conn);
      }
 catch (      IOException e) {
        printException(e,LogLevel.HIGH);
        return null;
      }
    }
 else {
      printLog("ERROR: conn " + conn_id + " not found: abort.",LogLevel.MEDIUM);
      return null;
    }
  }
 else {
    printWarning("Unsupported protocol (" + proto + "): Message discarded",LogLevel.HIGH);
    return null;
  }
  String dest_addr=dest_ipaddr.toString();
  printMessageLog(proto,dest_addr,dest_port,msg.getLength(),msg,"sent");
  return conn_id;
}

{
  try {
    printMessageLog(msg.getTransportProtocol(),msg.getRemoteAddress(),msg.getRemotePort(),msg.getLength(),msg,"received");
    if (msg.getLength() <= 2) {
      if (log_all_packets)       printLog("message too short: discarded\r\n",LogLevel.LOW);
      return;
    }
    String first_line=msg.getFirstLine();
    if (first_line == null || first_line.toUpperCase().indexOf("SIP/2.0") < 0) {
      if (log_all_packets)       printLog("NOT a SIP message: discarded\r\n",LogLevel.LOW);
      return;
    }
    printLog("received new SIP message",LogLevel.HIGH);
    printLog("message:\r\n" + msg.toString(),LogLevel.LOWER);
    if (msg.isRequest()) {
      ViaHeader vh=msg.getViaHeader();
      boolean via_changed=false;
      String src_addr=msg.getRemoteAddress();
      int src_port=msg.getRemotePort();
      String via_addr=vh.getHost();
      int via_port=vh.getPort();
      if (via_port <= 0)       via_port=SipStack.default_port;
      if (!via_addr.equals(src_addr) && this.useViaReceived) {
        vh.setReceived(src_addr);
        via_changed=true;
      }
      if (this.useViaRport) {
        if (vh.hasRport()) {
          vh.setRport(src_port);
          via_changed=true;
        }
 else {
          if (force_rport && via_port != src_port) {
            vh.setRport(src_port);
            via_changed=true;
          }
        }
      }
      if (via_changed) {
        msg.removeViaHeader();
        msg.addViaHeader(vh);
      }
    }
    if (listeners == null || listeners.size() == 0) {
      if (initComplete)       printLog("no listener found: meesage discarded.",LogLevel.HIGH);
      return;
    }
    if (listeners.containsKey(PROMISQUE)) {
      printLog("message passed to uas: " + PROMISQUE,LogLevel.MEDIUM);
      ((SipProviderListener)listeners.get(PROMISQUE)).onReceivedMessage(this,msg);
    }
    if (!msg.isRequest() && !msg.isResponse()) {
      printLog("No valid SIP message: message discarded.",LogLevel.HIGH);
      return;
    }
    if (msg.isRequest() && msg.isOption()) {
      int optStat=486;
      if (listeners.containsKey(INVITE)) {
        if (this.optionHandler != null) {
          String optBody=optionHandler.onOptionMsgReceived();
          if (optBody != null) {
            optStat=200;
            printLog("OPTION Request - response status=" + optStat,LogLevel.HIGH);
            TransactionServer ts=new TransactionServer(this,msg,null);
            ts.respondWith(MessageFactory.createResponse(msg,optStat,SipResponses.reasonOf(optStat),null,null,"application/sdp",optBody));
            return;
          }
        }
 else         optStat=200;
      }
      printLog("OPTION Request - response status=" + optStat,LogLevel.MEDIUM);
      TransactionServer ts=new TransactionServer(this,msg,null);
      ts.respondWith(MessageFactory.createResponse(msg,optStat,SipResponses.reasonOf(optStat),null));
      return;
    }
    Identifier key=msg.getTransactionId();
    printLog("DEBUG: transaction-id: " + key,LogLevel.MEDIUM);
    if (listeners.containsKey(key)) {
      printLog("message passed to transaction: " + key,LogLevel.MEDIUM);
      ((SipProviderListener)listeners.get(key)).onReceivedMessage(this,msg);
      return;
    }
    key=msg.getDialogId();
    printLog("DEBUG: dialog-id: " + key,LogLevel.MEDIUM);
    if (listeners.containsKey(key)) {
      printLog("message passed to dialog: " + key,LogLevel.MEDIUM);
      ((SipProviderListener)listeners.get(key)).onReceivedMessage(this,msg);
      return;
    }
    key=msg.getMethodId();
    if (msg.isRequest() && msg.isInvite()) {
synchronized (inviteLock) {
        if (listeners.containsKey(key)) {
          printLog("message passed to uas: " + key,LogLevel.MEDIUM);
          ((SipProviderListener)listeners.get(key)).onReceivedMessage(this,msg);
          return;
        }
      }
    }
 else     if (listeners.containsKey(key)) {
      printLog("message passed to uas: " + key,LogLevel.LOW);
      ((SipProviderListener)listeners.get(key)).onReceivedMessage(this,msg);
      return;
    }
    if (listeners.containsKey(ANY)) {
      printLog("message passed to uas: " + ANY,LogLevel.MEDIUM);
      ((SipProviderListener)listeners.get(ANY)).onReceivedMessage(this,msg);
      return;
    }
    if (msg.isRequest() && msg.isInvite()) {
      if (sipBusyUrl != null) {
        String targetId=msg.getToHeader().getNameAddress().toString().replaceAll("(?i).*sip:<?([^@<]+)@.*","$1");
        String redirect_Url=sipBusyUrl.replaceAll("calleeid",targetId);
        printLog("Incoming SIP Call - Channel busy - Redirect to: " + redirect_Url,LogLevel.LOW);
        Message resp=MessageFactory.createResponse(msg,302,SipResponses.reasonOf(302),new NameAddress(redirect_Url));
        InviteTransactionServer ts=new InviteTransactionServer(this,msg,null);
        ts.respondWith(resp);
        return;
      }
      printLog("Invite Request - Sending busy response (486)",LogLevel.MEDIUM);
      InviteTransactionServer ts=new InviteTransactionServer(this,msg,null);
      ts.respondWith(MessageFactory.createResponse(msg,486,SipResponses.reasonOf(486),null));
      return;
    }
    if (msg.isRequest() && msg.isNotify()) {
      printLog("Notify Request - Sending unsupported response (405)",LogLevel.MEDIUM);
      TransactionServer ts=new TransactionServer(this,msg,null);
      ts.respondWith(MessageFactory.createResponse(msg,405,SipResponses.reasonOf(405),null));
      return;
    }
    printLog("No SipListener found matching that message: message DISCARDED",LogLevel.HIGH);
    printLog("Pending SipProviderListeners= " + listeners.size(),LogLevel.MEDIUM);
  }
 catch (  Exception e) {
    printWarning("Error handling a new incoming message",LogLevel.HIGH);
    printException(e,LogLevel.MEDIUM);
    if (exception_listeners == null || exception_listeners.size() == 0) {
      System.err.println("Error handling a new incoming message");
      e.printStackTrace();
    }
 else {
      for (Iterator i=exception_listeners.iterator(); i.hasNext(); )       try {
        ((SipProviderExceptionListener)i.next()).onMessageException(msg,e);
      }
 catch (      Exception e2) {
        printWarning("Error handling handling the Exception",LogLevel.HIGH);
        printException(e2,LogLevel.MEDIUM);
      }
    }
  }
}

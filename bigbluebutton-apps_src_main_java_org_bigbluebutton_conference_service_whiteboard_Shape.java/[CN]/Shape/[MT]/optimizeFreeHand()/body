{
  if (shape.length < 10)   return shape;
  ArrayList<Double> newShape=new ArrayList<Double>();
  double x1=shape[0];
  double y1=shape[1];
  newShape.add(x1);
  newShape.add(y1);
  double stableSlope=0;
  double newSlope;
  double lastStableX=x1;
  double lastStableY=y1;
  for (int i=2; i < shape.length; i=i + 2) {
    double x2=shape[i];
    double y2=shape[i + 1];
    newSlope=(y2 - y1) / (x2 - x1);
    if (slopeDifference(stableSlope,newSlope) < 5) {
      lastStableX=x2;
      lastStableY=y2;
    }
 else {
      stableSlope=newSlope;
      x1=x2;
      y1=y2;
      newShape.add(x1);
      newShape.add(y1);
    }
  }
  newShape.add(shape[shape.length - 2]);
  newShape.add(shape[shape.length - 1]);
  double[] returnArray=new double[newShape.size()];
  for (int j=0; j < newShape.size(); j++) {
    returnArray[j]=newShape.get(j);
  }
  return returnArray;
}

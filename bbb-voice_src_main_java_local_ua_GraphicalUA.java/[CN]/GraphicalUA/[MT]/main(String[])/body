{
  System.out.println("Graphical MJSIP UA 1.0");
  String file=null;
  boolean opt_regist=false;
  boolean opt_unregist=false;
  boolean opt_unregist_all=false;
  int opt_expires=-1;
  long opt_keepalive_time=-1;
  boolean opt_no_offer=false;
  String opt_call_to=null;
  int opt_accept_time=-1;
  int opt_hangup_time=-1;
  String opt_redirect_to=null;
  String opt_transfer_to=null;
  int opt_transfer_time=-1;
  int opt_re_invite_time=-1;
  boolean opt_audio=false;
  boolean opt_video=false;
  int opt_media_port=0;
  boolean opt_recv_only=false;
  boolean opt_send_only=false;
  boolean opt_send_tone=false;
  String opt_send_file=null;
  String opt_recv_file=null;
  boolean opt_no_prompt=false;
  String opt_from_url=null;
  String opt_contact_url=null;
  String opt_username=null;
  String opt_realm=null;
  String opt_passwd=null;
  int opt_debug_level=-1;
  String opt_log_path=null;
  String opt_outbound_proxy=null;
  String opt_via_addr=SipProvider.AUTO_CONFIGURATION;
  int opt_host_port=SipStack.default_port;
  try {
    for (int i=0; i < args.length; i++) {
      if (args[i].equals("-f") && args.length > (i + 1)) {
        file=args[++i];
        continue;
      }
      if (args[i].equals("-g") && args.length > (i + 1)) {
        opt_regist=true;
        String time=args[++i];
        if (time.charAt(time.length() - 1) == 'h')         opt_expires=Integer.parseInt(time.substring(0,time.length() - 1)) * 3600;
 else         opt_expires=Integer.parseInt(time);
        continue;
      }
      if (args[i].equals("-u")) {
        opt_unregist=true;
        continue;
      }
      if (args[i].equals("-z")) {
        opt_unregist_all=true;
        continue;
      }
      if (args[i].equals("-n")) {
        opt_no_offer=true;
        continue;
      }
      if (args[i].equals("-c") && args.length > (i + 1)) {
        opt_call_to=args[++i];
        continue;
      }
      if (args[i].equals("-y") && args.length > (i + 1)) {
        opt_accept_time=Integer.parseInt(args[++i]);
        continue;
      }
      if (args[i].equals("-t") && args.length > (i + 1)) {
        opt_hangup_time=Integer.parseInt(args[++i]);
        continue;
      }
      if (args[i].equals("-i") && args.length > (i + 1)) {
        opt_re_invite_time=Integer.parseInt(args[++i]);
        continue;
      }
      if (args[i].equals("-r") && args.length > (i + 1)) {
        opt_accept_time=0;
        opt_redirect_to=args[++i];
        continue;
      }
      if (args[i].equals("-q") && args.length > (i + 1)) {
        opt_transfer_to=args[++i];
        opt_transfer_time=Integer.parseInt(args[++i]);
        continue;
      }
      if (args[i].equals("-a")) {
        opt_audio=true;
        continue;
      }
      if (args[i].equals("-v")) {
        opt_video=true;
        continue;
      }
      if (args[i].equals("-m") && args.length > (i + 1)) {
        opt_media_port=Integer.parseInt(args[++i]);
        continue;
      }
      if (args[i].equals("-o") && args.length > (i + 1)) {
        opt_outbound_proxy=args[++i];
        continue;
      }
      if (args[i].equals("--via-addr") && args.length > (i + 1)) {
        opt_via_addr=args[++i];
        continue;
      }
      if (args[i].equals("-p") && args.length > (i + 1)) {
        opt_host_port=Integer.parseInt(args[++i]);
        continue;
      }
      if (args[i].equals("--keep-alive") && args.length > (i + 1)) {
        opt_keepalive_time=Integer.parseInt(args[++i]);
        continue;
      }
      if (args[i].equals("--from-url") && args.length > (i + 1)) {
        opt_from_url=args[++i];
        continue;
      }
      if (args[i].equals("--contact-url") && args.length > (i + 1)) {
        opt_contact_url=args[++i];
        continue;
      }
      if (args[i].equals("--username") && args.length > (i + 1)) {
        opt_username=args[++i];
        continue;
      }
      if (args[i].equals("--realm") && args.length > (i + 1)) {
        opt_realm=args[++i];
        continue;
      }
      if (args[i].equals("--passwd") && args.length > (i + 1)) {
        opt_passwd=args[++i];
        continue;
      }
      if (args[i].equals("--recv-only")) {
        opt_recv_only=true;
        continue;
      }
      if (args[i].equals("--send-only")) {
        opt_send_only=true;
        continue;
      }
      if (args[i].equals("--send-tone")) {
        opt_send_only=true;
        opt_send_tone=true;
        continue;
      }
      if (args[i].equals("--send-file") && args.length > (i + 1)) {
        opt_send_file=args[++i];
        continue;
      }
      if (args[i].equals("--recv-file") && args.length > (i + 1)) {
        opt_recv_file=args[++i];
        continue;
      }
      if (args[i].equals("--debug-level") && args.length > (i + 1)) {
        opt_debug_level=Integer.parseInt(args[++i]);
        continue;
      }
      if (args[i].equals("--log-path") && args.length > (i + 1)) {
        opt_log_path=args[++i];
        continue;
      }
      if (args[i].equals("--no-prompt")) {
        opt_no_prompt=true;
        continue;
      }
      if (!args[i].equals("-h"))       System.out.println("unrecognized param '" + args[i] + "'\n");
      System.out.println("usage:\n   java GraphicalUA [options]");
      System.out.println("   options:");
      System.out.println("   -h              this help");
      System.out.println("   -f <file>       specifies a configuration file");
      System.out.println("   -g <time>       registers the contact URL with the registrar server");
      System.out.println("                   where time is the duration of the registration, and can be");
      System.out.println("                   in seconds (default) or hours (-g 7200 is the same as -g 2h)");
      System.out.println("   -u              unregisters the contact URL with the registrar server");
      System.out.println("                   (is the same as -g 0)");
      System.out.println("   -z              unregisters ALL the contact URLs");
      System.out.println("   -n              no offer in invite (offer/answer in 2xx/ack)");
      System.out.println("   -c <call_to>    calls a remote user");
      System.out.println("   -y <secs>       auto answer time");
      System.out.println("   -t <secs>       auto hangup time (0 means manual hangup)");
      System.out.println("   -i <secs>       re-invite after <secs> seconds");
      System.out.println("   -r <url>        redirects the call to new user <url>");
      System.out.println("   -q <url> <secs> transfers the call to <url> after <secs> seconds");
      System.out.println("   -a              audio");
      System.out.println("   -v              video");
      System.out.println("   -m <port>       (first) local media port");
      System.out.println("   -p <port>       local SIP port, used ONLY without -f option");
      System.out.println("   -o <addr>[:<port>]  use the specified outbound proxy");
      System.out.println("   --via-addr <addr>   host via address, used ONLY without -f option");
      System.out.println("   --keep-alive <millisecs>   send keep-alive packets each <millisecs>");
      System.out.println("   --from-url <url>    user's address-of-record (AOR)");
      System.out.println("   --contact-url <url> user's contact url");
      System.out.println("   --username <name>   user name used for authentication");
      System.out.println("   --realm <realm>     realm used for authentication");
      System.out.println("   --passwd <passwd>   passwd used for authentication");
      System.out.println("   --recv-only         receive only mode, no media is sent");
      System.out.println("   --send-only         send only mode, no media is received");
      System.out.println("   --send-tone         send only mode, an audio test tone is generated");
      System.out.println("   --send-file <file>  audio is played from the specified file");
      System.out.println("   --recv-file <file>  audio is recorded to the specified file");
      System.out.println("   --debug-level <n>   debug level (level=0 means no log)");
      System.out.println("   --log-path <path>   base path for all logs (./log is the default value)");
      System.out.println("   --no-prompt         do not prompt");
      System.exit(0);
    }
    SipStack.init(file);
    if (opt_debug_level >= 0)     SipStack.debug_level=opt_debug_level;
    if (opt_log_path != null)     SipStack.log_path=opt_log_path;
    SipProvider sip_provider;
    if (file != null)     sip_provider=new SipProvider(file);
 else     sip_provider=new SipProvider(opt_via_addr,opt_host_port);
    if (opt_outbound_proxy != null)     sip_provider.setOutboundProxy(new SocketAddress(opt_outbound_proxy));
    UserAgentProfile user_profile=new UserAgentProfile(file);
    if (opt_regist)     user_profile.do_register=true;
    if (opt_unregist)     user_profile.do_unregister=true;
    if (opt_unregist_all)     user_profile.do_unregister_all=true;
    if (opt_expires > 0)     user_profile.expires=opt_expires;
    if (opt_keepalive_time >= 0)     user_profile.keepalive_time=opt_keepalive_time;
    if (opt_hangup_time > 0)     user_profile.hangup_time=opt_hangup_time;
    if (opt_no_offer)     user_profile.no_offer=true;
    if (opt_call_to != null)     user_profile.call_to=opt_call_to;
    if (opt_accept_time >= 0)     user_profile.accept_time=opt_accept_time;
    if (opt_redirect_to != null)     user_profile.redirect_to=opt_redirect_to;
    if (opt_re_invite_time > 0)     user_profile.re_invite_time=opt_re_invite_time;
    if (opt_transfer_to != null)     user_profile.transfer_to=opt_transfer_to;
    if (opt_transfer_time > 0)     user_profile.transfer_time=opt_transfer_time;
    if (opt_audio)     user_profile.audio=true;
    if (opt_video)     user_profile.video=true;
    if (opt_media_port > 0)     user_profile.video_port=(user_profile.audio_port=opt_media_port) + 2;
    if (opt_from_url != null)     user_profile.from_url=opt_from_url;
    if (opt_contact_url != null)     user_profile.contact_url=opt_contact_url;
    if (opt_username != null)     user_profile.username=opt_username;
    if (opt_realm != null)     user_profile.realm=opt_realm;
    if (opt_passwd != null)     user_profile.passwd=opt_passwd;
    if (opt_recv_only)     user_profile.recv_only=true;
    if (opt_send_only)     user_profile.send_only=true;
    if (opt_send_tone)     user_profile.send_tone=true;
    if (opt_send_file != null)     user_profile.send_file=opt_send_file;
    if (opt_recv_file != null)     user_profile.recv_file=opt_recv_file;
    if (opt_no_prompt)     user_profile.no_prompt=true;
    if ((opt_recv_only || opt_send_only || opt_send_tone|| opt_send_file != null || opt_recv_file != null) && !opt_video)     user_profile.audio=true;
    new GraphicalUA(sip_provider,user_profile);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}

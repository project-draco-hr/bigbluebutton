{
  if (logger.isDebugEnabled()) {
    logger.debug("Attempt to load " + libnameversion + " url[] length="+ urls.length);
  }
  for (  URL url : urls) {
    if (logger.isDebugEnabled()) {
      logger.debug("URL for " + libnameversion + " "+ url);
    }
  }
  if (!isLoadLibraries()) {
    if (logger.isDebugEnabled()) {
      logger.debug("Not loading " + libnameversion);
    }
    return null;
  }
  String filename=loadedLibraries.get(libnameversion);
  if (filename != null) {
    if (logger.isDebugEnabled()) {
      logger.debug("Not loading. " + libnameversion + " is already loaded in "+ filename);
    }
    return filename;
  }
  File tempFile=null;
  UnsatisfiedLinkError loadError=null;
  try {
    for (    URL url : urls) {
      File file;
      if (logger.isDebugEnabled()) {
        logger.debug("Loading " + libnameversion + " from url "+ url);
      }
      if (!(file=new File(getCacheDir() != null ? getCacheDir() : getTempDir(),new File(url.getPath()).getName())).exists()) {
        if (tempFile != null && tempFile.exists()) {
          tempFile.deleteOnExit();
        }
        if (logger.isDebugEnabled()) {
          logger.debug("Extracting " + url);
        }
        if (getCacheDir() != null) {
          file=extractResource(url,getCacheDir(),null,null);
        }
 else {
          file=tempFile=extractResource(url,getTempDir(),null,null);
        }
      }
 else       while (System.currentTimeMillis() - file.lastModified() < 1000) {
        try {
          Thread.sleep(1000);
        }
 catch (        InterruptedException ex) {
          Thread.currentThread().interrupt();
        }
      }
      if (file != null && file.exists()) {
        filename=file.getAbsolutePath();
        try {
          if (logger.isDebugEnabled()) {
            logger.debug("Loading " + libnameversion + " from library "+ filename);
            logger.debug("Storing " + libnameversion + " with library "+ filename);
          }
          loadedLibraries.put(libnameversion,filename);
          System.load(filename);
          return filename;
        }
 catch (        UnsatisfiedLinkError e) {
          loadError=e;
          loadedLibraries.remove(libnameversion);
          if (logger.isDebugEnabled()) {
            logger.debug("Failed to load " + filename + ": "+ e);
          }
        }
      }
    }
    String libname=libnameversion.split("@")[0];
    if (logger.isDebugEnabled()) {
      logger.debug("Loading library " + libname);
      logger.debug("Last resort: Storing " + libnameversion + " with library "+ filename);
    }
    loadedLibraries.put(libnameversion,libname);
    System.loadLibrary(libname);
    if (logger.isDebugEnabled()) {
      logger.debug("Loaded library " + libname);
      logger.debug("Last resort: Stored " + libnameversion + " with library "+ filename);
    }
    return libname;
  }
 catch (  UnsatisfiedLinkError e) {
    if (loadedLibraries.containsKey(libnameversion)) {
      if (logger.isDebugEnabled()) {
        logger.debug("Removing entry for library " + libnameversion);
      }
    }
    loadedLibraries.remove(libnameversion);
    if (loadError != null && e.getCause() == null) {
      e.initCause(loadError);
    }
    if (logger.isDebugEnabled()) {
      logger.debug("Failed to load for " + libnameversion + ": "+ e);
    }
    throw e;
  }
catch (  IOException ex) {
    loadedLibraries.remove(libnameversion);
    if (loadError != null && ex.getCause() == null) {
      ex.initCause(loadError);
    }
    Error e=new UnsatisfiedLinkError(ex.toString());
    e.initCause(ex);
    if (logger.isDebugEnabled()) {
      logger.debug("Failed to extract for " + libnameversion + ": "+ e);
    }
    throw e;
  }
 finally {
    if (tempFile != null && tempFile.exists()) {
      tempFile.deleteOnExit();
    }
  }
}

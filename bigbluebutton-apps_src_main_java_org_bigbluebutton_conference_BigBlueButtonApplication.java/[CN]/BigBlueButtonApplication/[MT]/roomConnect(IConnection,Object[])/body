{
  String username=((String)params[0]).toString();
  String role=((String)params[1]).toString();
  String room=((String)params[2]).toString();
  String voiceBridge=((String)params[3]).toString();
  boolean record=(Boolean)params[4];
  String externalUserID=((String)params[5]).toString();
  String internalUserID=((String)params[6]).toString();
  Boolean locked=false;
  if (params.length >= 7 && ((Boolean)params[7])) {
    locked=true;
  }
  Boolean muted=false;
  if (params.length >= 8 && ((Boolean)params[8])) {
    muted=true;
  }
  Map<String,Boolean> lsMap=null;
  if (params.length >= 9) {
    try {
      lsMap=(Map<String,Boolean>)params[9];
    }
 catch (    Exception e) {
      lsMap=new HashMap<String,Boolean>();
    }
  }
  if (record == true) {
    recorderApplication.createRecordSession(room);
  }
  BigBlueButtonSession bbbSession=new BigBlueButtonSession(room,internalUserID,username,role,voiceBridge,record,externalUserID,muted);
  connection.setAttribute(Constants.SESSION,bbbSession);
  connection.setAttribute("INTERNAL_USER_ID",internalUserID);
  String debugInfo="internalUserID=" + internalUserID + ",username="+ username+ ",role="+ role+ ","+ ",voiceConf="+ voiceBridge+ ",room="+ room+ ",externalUserid="+ externalUserID;
  log.debug("User [{}] connected to room [{}]",debugInfo,room);
  bbbGW.initLockSettings(room,locked,lsMap);
  String meetingId=bbbSession.getRoom();
  String userId=bbbSession.getInternalUserID();
  String connType=getConnectionType(Red5.getConnectionLocal().getType());
  String userFullname=bbbSession.getUsername();
  String connId=Red5.getConnectionLocal().getSessionId();
  String sessionId=CONN + connId + "-"+ userId;
  connInvokerService.addConnection(sessionId,connection);
  log.info("User connected: sessionId=[" + sessionId + "], encoding=["+ connType+ "], meetingId= ["+ meetingId+ "], userId=["+ userId+ "] username=["+ userFullname+ "]");
  Map<String,Object> logData=new HashMap<String,Object>();
  logData.put("meetingId",meetingId);
  logData.put("connType",connType);
  logData.put("connId",connId);
  logData.put("userId",userId);
  logData.put("sessionId",sessionId);
  logData.put("username",userFullname);
  logData.put("event","user_joining_bbb_apps");
  logData.put("description","User joining BBB Apps.");
  Gson gson=new Gson();
  String logStr=gson.toJson(logData);
  log.info("User joining bbb-aaps: data={}",logStr);
  return super.roomConnect(connection,params);
}

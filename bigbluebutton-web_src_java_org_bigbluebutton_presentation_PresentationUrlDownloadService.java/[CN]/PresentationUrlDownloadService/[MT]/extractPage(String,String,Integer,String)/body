{
  File sourceMeetingPath=new File(presentationDir + File.separator + sourceMeetingId+ File.separator+ sourceMeetingId+ File.separator+ presentationId);
  final String presentationFilter=presentationId;
  FilenameFilter pdfFilter=new FilenameFilter(){
    public boolean accept(    File dir,    String name){
      return name.startsWith(presentationFilter) && name.toLowerCase().endsWith("pdf");
    }
  }
;
  File[] matches=sourceMeetingPath.listFiles(pdfFilter);
  if (matches.length != 1) {
    FilenameFilter imgFlter=new FilenameFilter(){
      public boolean accept(      File dir,      String name){
        return name.startsWith(presentationFilter);
      }
    }
;
    matches=sourceMeetingPath.listFiles(imgFlter);
  }
  if (matches.length != 1) {
    log.info("Not matching PDF file with prefix {} found at {}",sourceMeetingId,sourceMeetingPath);
  }
 else {
    File sourcePresentationFile=matches[0];
    String filenameExt=FilenameUtils.getExtension(sourcePresentationFile.getName());
    String presId=generatePresentationId(presentationId);
    String newFilename=Util.createNewFilename(presId,filenameExt);
    File uploadDir=createPresentationDirectory(destinationMeetingId,presentationDir,presId);
    String newFilePath=uploadDir.getAbsolutePath() + File.separatorChar + newFilename;
    File newPresentation=new File(newFilePath);
    if (sourcePresentationFile.getName().toLowerCase().endsWith("pdf")) {
      pageExtractor.extractPage(sourcePresentationFile,new File(newFilePath),presentationSlide);
    }
 else {
      try {
        FileUtils.copyFile(sourcePresentationFile,newPresentation);
      }
 catch (      IOException e) {
        log.error("Could not copy presentation {} to {}",sourcePresentationFile.getAbsolutePath(),newPresentation.getAbsolutePath());
        e.printStackTrace();
      }
    }
    processUploadedFile(destinationMeetingId,presId,"default-" + presentationSlide.toString() + "."+ filenameExt,newPresentation);
  }
}

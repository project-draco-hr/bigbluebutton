{
  byte[] dtmfbuf=new byte[sipCodec.getOutgoingEncodedFrameSize() + RTP_HEADER_SIZE];
  RtpPacket dtmfpacket=new RtpPacket(dtmfbuf,0);
  dtmfpacket.setPayloadType(dtmf2833Type);
  dtmfpacket.setPayloadLength(sipCodec.getOutgoingEncodedFrameSize());
  byte[] blankbuf=new byte[sipCodec.getOutgoingEncodedFrameSize() + RTP_HEADER_SIZE];
  RtpPacket blankpacket=new RtpPacket(blankbuf,0);
  blankpacket.setPayloadType(sipCodec.getCodecId());
  blankpacket.setPayloadLength(sipCodec.getOutgoingEncodedFrameSize());
  for (int d=0; d < argDigits.length(); d++) {
    char digit=argDigits.charAt(d);
    if (digit == '*') {
      dtmfbuf[startPayloadPos]=10;
    }
 else     if (digit == '#') {
      dtmfbuf[startPayloadPos]=11;
    }
 else     if (digit >= 'A' && digit <= 'D') {
      dtmfbuf[startPayloadPos]=(byte)(digit - 53);
    }
 else {
      dtmfbuf[startPayloadPos]=(byte)(digit - 48);
    }
    try {
      dtmfbuf[startPayloadPos + 1]=0;
      dtmfbuf[startPayloadPos + 2]=1;
      dtmfbuf[startPayloadPos + 3]=-32;
      for (int r=0; r < 3; r++) {
        dtmfpacket.setSequenceNumber(seqn++);
        dtmfpacket.setTimestamp(sipCodec.getOutgoingEncodedFrameSize());
        doRtpDelay();
        rtpSocketSend(dtmfpacket);
      }
      dtmfbuf[startPayloadPos + 1]=-128;
      dtmfbuf[startPayloadPos + 2]=3;
      dtmfbuf[startPayloadPos + 3]=116;
      for (int r=0; r < 3; r++) {
        dtmfpacket.setSequenceNumber(seqn++);
        dtmfpacket.setTimestamp(sipCodec.getOutgoingEncodedFrameSize());
        doRtpDelay();
        rtpSocketSend(dtmfpacket);
      }
      for (int r=0; r < 200 / sipCodec.getOutgoingPacketization(); r++) {
        blankpacket.setSequenceNumber(seqn++);
        blankpacket.setTimestamp(sipCodec.getOutgoingEncodedFrameSize());
        doRtpDelay();
        rtpSocketSend(blankpacket);
      }
    }
 catch (    Exception e) {
      println("queueSipDtmfDigits",e.getLocalizedMessage());
    }
  }
}

{
  try {
    IScope scope=getScope();
    IStreamFilenameGenerator generator=(IStreamFilenameGenerator)ScopeUtils.getScopeService(scope,IStreamFilenameGenerator.class,DefaultStreamFilenameGenerator.class);
    String filename=generator.generateFilename(scope,name,".flv",GenerationType.RECORD);
    File file;
    if (generator.resolvesToAbsolutePath()) {
      file=new File(filename);
    }
 else {
      file=scope.getContext().getResource(filename).getFile();
    }
    if (!isAppend) {
      if (file.exists()) {
        if (!file.delete())         throw new IOException("file could not be deleted");
      }
    }
 else {
      if (!file.exists()) {
        isAppend=false;
      }
    }
    if (!file.exists()) {
      String path=file.getAbsolutePath();
      int slashPos=path.lastIndexOf(File.separator);
      if (slashPos != -1) {
        path=path.substring(0,slashPos);
      }
      File tmp=new File(path);
      if (!tmp.isDirectory()) {
        tmp.mkdirs();
      }
    }
    if (!file.exists()) {
      if (!file.canWrite()) {
        log.warn("File cannot be written to " + file.getCanonicalPath());
      }
      file.createNewFile();
    }
    FileConsumer fc=new FileConsumer(scope,file);
    Map<Object,Object> paramMap=new HashMap<Object,Object>();
    if (isAppend) {
      paramMap.put("mode","append");
    }
 else {
      paramMap.put("mode","record");
    }
    if (null == recordPipe) {
      recordPipe=new InMemoryPushPushPipe();
    }
    recordPipe.subscribe(fc,paramMap);
    recordingFilename=filename;
  }
 catch (  IOException e) {
    log.warn("Save as exception",e);
  }
}

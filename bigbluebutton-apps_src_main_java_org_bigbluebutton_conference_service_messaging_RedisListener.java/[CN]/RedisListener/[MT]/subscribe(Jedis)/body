{
  log.debug("subscribe init...");
  Thread t=new Thread(new Runnable(){
    @Override public void run(){
      jedis.psubscribe(new JedisPubSub(){
        @Override public void onUnsubscribe(        String arg0,        int arg1){
        }
        @Override public void onSubscribe(        String arg0,        int arg1){
        }
        @Override public void onPUnsubscribe(        String arg0,        int arg1){
        }
        @Override public void onPSubscribe(        String arg0,        int arg1){
          log.debug("subscribe to: " + arg0 + " "+ arg1);
        }
        @Override public void onPMessage(        String pattern,        String channel,        String message){
          log.debug("messsage " + pattern + channel+ message);
          if (channel.equalsIgnoreCase(MessagingConstants.SYSTEM_CHANNEL)) {
            Gson gson=new Gson();
            HashMap<String,String> map=gson.fromJson(message,new TypeToken<Map<String,String>>(){
            }
.getType());
            String meetingId=map.get("meetingId");
            String messageId=map.get("messageId");
            if (messageId != null) {
              if (MessagingConstants.END_MEETING_REQUEST_EVENT.equalsIgnoreCase(messageId)) {
                roomsManager.endMeetingRequest(meetingId);
              }
            }
          }
 else           if (channel.equalsIgnoreCase(MessagingConstants.PRESENTATION_CHANNEL)) {
            log.debug("receiving message " + message);
            Gson gson=new Gson();
            HashMap<String,String> map=gson.fromJson(message,new TypeToken<Map<String,String>>(){
            }
.getType());
            messageListener.handleReceivedMessage(map);
          }
        }
        @Override public void onMessage(        String channel,        String message){
        }
      }
,MessagingConstants.BIGBLUEBUTTON_PATTERN);
    }
  }
);
  t.start();
}

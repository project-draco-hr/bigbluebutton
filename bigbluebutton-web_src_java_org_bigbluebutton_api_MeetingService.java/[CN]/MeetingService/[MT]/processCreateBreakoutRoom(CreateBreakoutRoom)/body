{
  Map<String,String> params=new HashMap<String,String>();
  params.put("name",message.name);
  params.put("breakoutId",message.breakoutId);
  params.put("meetingID",message.parentId);
  params.put("isBreakout","true");
  params.put("attendeePW",message.viewerPassword);
  params.put("moderatorPW",message.moderatorPassword);
  params.put("voiceBridge",message.voiceConfId);
  params.put("duration",message.durationInMinutes.toString());
  String recordType=message.recordType.toString();
  if (recordType.equals("moderator")) {
    params.put("record","true");
  }
 else   if (recordType.equals("all")) {
    params.put("record","true");
    params.put("autoStartRecording","true");
    params.put("allowStartStopRecording","false");
  }
 else {
    params.put("record","false");
  }
  Meeting breakout=paramsProcessorUtil.processCreateParams(params);
  handleCreateMeeting(breakout);
  presDownloadService.downloadAndProcessDocument(message.defaultPresentationURL,breakout.getInternalId());
}

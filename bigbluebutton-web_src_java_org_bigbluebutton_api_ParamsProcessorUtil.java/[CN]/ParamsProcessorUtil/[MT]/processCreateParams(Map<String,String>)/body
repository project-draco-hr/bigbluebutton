{
  String meetingName=params.get("name");
  String externalMeetingId=params.get("meetingID");
  String viewerPass=processPassword(params.get("attendeePW"));
  String modPass=processPassword(params.get("moderatorPW"));
  String telVoice=processTelVoice(params.get("voiceBridge"));
  String webVoice=params.get("webVoice");
  if (StringUtils.isEmpty(webVoice)) {
    webVoice=telVoice;
  }
  String dialNumber=processDialNumber(params.get("dialNumber"));
  String logoutUrl=processLogoutUrl(params.get("logoutURL"));
  boolean record=processRecordMeeting(params.get("record"));
  int maxUsers=processMaxUser(params.get("maxParticipants"));
  int meetingDuration=processMeetingDuration(params.get("duration"));
  String welcomeMessage=processWelcomeMessage(params.get("welcome"));
  welcomeMessage=substituteKeywords(welcomeMessage,dialNumber,telVoice,meetingName);
  String internalMeetingId="";
  if (isTestMeeting(telVoice)) {
    internalMeetingId=getIntMeetingIdForTestMeeting(telVoice);
  }
  Map<String,String> meetingInfo=new HashMap<String,String>();
  for (  String key : params.keySet()) {
    if (key.contains("meta")) {
      String[] meta=key.split("_");
      if (meta.length == 2) {
        meetingInfo.put(meta[1],params.get(key));
      }
    }
  }
  long createTime=System.currentTimeMillis();
  internalMeetingId=internalMeetingId + '-' + new Long(createTime).toString();
  Meeting meeting=new Meeting.Builder(externalMeetingId,internalMeetingId,createTime).withName(meetingName).withMaxUsers(maxUsers).withModeratorPass(modPass).withViewerPass(viewerPass).withRecording(record).withDuration(meetingDuration).withLogoutUrl(logoutUrl).withTelVoice(telVoice).withWebVoice(webVoice).withDialNumber(dialNumber).withMetadata(meetingInfo).withWelcomeMessage(welcomeMessage).build();
  return meeting;
}

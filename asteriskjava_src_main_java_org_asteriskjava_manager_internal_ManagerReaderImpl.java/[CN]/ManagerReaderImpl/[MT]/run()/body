{
  final Map<String,Object> buffer=new HashMap<String,Object>();
  String line;
  if (socket == null) {
    throw new IllegalStateException("Unable to run: socket is null.");
  }
  this.die=false;
  this.dead=false;
  try {
    while (!this.die && (line=socket.readLine()) != null) {
      if (line.startsWith("Asterisk Call Manager/") || line.startsWith("Asterisk Call Manager Proxy/") || line.startsWith("OpenPBX Call Manager/")|| line.startsWith("CallWeaver Call Manager/")) {
        ProtocolIdentifierReceivedEvent protocolIdentifierReceivedEvent;
        protocolIdentifierReceivedEvent=new ProtocolIdentifierReceivedEvent(source);
        protocolIdentifierReceivedEvent.setProtocolIdentifier(line);
        protocolIdentifierReceivedEvent.setDateReceived(DateUtil.getDate());
        dispatcher.dispatchEvent(protocolIdentifierReceivedEvent);
        continue;
      }
      if ("Follows".equals(buffer.get("response")) && line.endsWith("--END COMMAND--")) {
        buffer.put(COMMAND_RESULT_RESPONSE_KEY,line);
        continue;
      }
      if (line.length() > 0) {
        int delimiterIndex;
        int delimiterLength;
        delimiterIndex=line.indexOf(" ");
        delimiterLength=1;
        if (delimiterIndex > 0 && line.charAt(delimiterIndex - 1) == ':') {
          delimiterIndex--;
          delimiterLength++;
        }
        if (delimiterIndex > 0 && line.length() > delimiterIndex + delimiterLength) {
          String name;
          String value;
          name=line.substring(0,delimiterIndex).toLowerCase(Locale.ENGLISH);
          value=line.substring(delimiterIndex + delimiterLength);
          addToBuffer(buffer,name,value);
        }
      }
      if (line.length() == 0) {
        if (buffer.containsKey("event")) {
          ManagerEvent event=buildEvent(source,buffer);
          if (event != null) {
            dispatcher.dispatchEvent(event);
          }
 else {
            logger.debug("buildEvent returned null");
          }
        }
 else         if (buffer.containsKey("response")) {
          ManagerResponse response=buildResponse(buffer);
          if (response != null) {
            dispatcher.dispatchResponse(response);
          }
        }
 else {
          if (buffer.size() > 0) {
            logger.debug("Buffer contains neither response nor event");
          }
        }
        buffer.clear();
      }
    }
    this.dead=true;
    logger.debug("Reached end of stream, terminating reader.");
  }
 catch (  IOException e) {
    this.terminationException=e;
    this.dead=true;
    logger.info("Terminating reader thread: " + e.getMessage());
  }
 finally {
    this.dead=true;
    DisconnectEvent disconnectEvent=new DisconnectEvent(source);
    disconnectEvent.setDateReceived(DateUtil.getDate());
    dispatcher.dispatchEvent(disconnectEvent);
  }
}

{
switch (header.getDataType()) {
case TYPE_CHUNK_SIZE:
    return encodeChunkSize((ChunkSize)message);
case TYPE_INVOKE:
  return encodeInvoke((Invoke)message,rtmp);
case TYPE_NOTIFY:
if (((Notify)message).getCall() == null) {
  return encodeStreamMetadata((Notify)message);
}
 else {
  return encodeNotify((Notify)message,rtmp);
}
case TYPE_PING:
return encodePing((Ping)message);
case TYPE_BYTES_READ:
return encodeBytesRead((BytesRead)message);
case TYPE_AUDIO_DATA:
return encodeAudioData((AudioData)message);
case TYPE_VIDEO_DATA:
return encodeVideoData((VideoData)message);
case TYPE_FLEX_SHARED_OBJECT:
return encodeFlexSharedObject((ISharedObjectMessage)message,rtmp);
case TYPE_SHARED_OBJECT:
return encodeSharedObject((ISharedObjectMessage)message,rtmp);
case TYPE_SERVER_BANDWIDTH:
return encodeServerBW((ServerBW)message);
case TYPE_CLIENT_BANDWIDTH:
return encodeClientBW((ClientBW)message);
case TYPE_FLEX_MESSAGE:
return encodeFlexMessage((FlexMessage)message,rtmp);
case TYPE_FLEX_STREAM_SEND:
return encodeFlexStreamSend((FlexStreamSend)message);
default :
log.warn("Unknown object type: " + header.getDataType());
return null;
}
}

{
  if (log.isTraceEnabled()) {
    Gson gson=new Gson();
    String json=gson.toJson(msg.getMessage());
    log.trace("Handle broadcast message: " + msg.getMessageName() + " msg="+ json);
  }
  Runnable sender=new Runnable(){
    public void run(){
      IScope meetingScope=getScope(msg.getMeetingID());
      if (meetingScope != null) {
        List<Object> params=new ArrayList<Object>();
        params.add(msg.getMessageName());
        params.add(msg.getMessage());
        if (log.isTraceEnabled()) {
          Gson gson=new Gson();
          String json=gson.toJson(msg.getMessage());
          log.trace("Broadcast message: " + msg.getMessageName() + " msg="+ json);
        }
        ServiceUtils.invokeOnAllScopeConnections(meetingScope,"onMessageFromServer",params.toArray(),null);
      }
    }
  }
;
  long endNanos=System.nanoTime() + SEND_TIMEOUT;
  Future<?> f=runExec.submit(sender);
  try {
    long timeLeft=endNanos - System.nanoTime();
    f.get(timeLeft,TimeUnit.NANOSECONDS);
  }
 catch (  ExecutionException e) {
    log.warn("ExecutionException while sending broadcast message[" + msg.getMessageName() + "]");
  }
catch (  InterruptedException e) {
    log.warn("Interrupted exception while sending direct message[" + msg.getMessageName() + "]");
    Thread.currentThread().interrupt();
  }
catch (  TimeoutException e) {
    log.warn("Timeout exception while sending direct message[" + msg.getMessageName() + "]");
    f.cancel(true);
  }
}

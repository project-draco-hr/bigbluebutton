{
  Map<String,Method> setters;
  setters=ReflectionUtil.getSetters(target.getClass());
  for (  Map.Entry<String,Object> entry : attributes.entrySet()) {
    Object value;
    final Class dataType;
    Method setter;
    String setterName;
    if (ignoredAttributes != null && ignoredAttributes.contains(entry.getKey())) {
      continue;
    }
    setterName=ReflectionUtil.stripIllegalCharacters(entry.getKey());
    if ("source".equals(setterName)) {
      setterName="src";
    }
    setter=setters.get(setterName);
    if (setter == null && !setterName.endsWith("s")) {
      setter=setters.get(setterName + "s");
      if (setter != null && !(setter.getParameterTypes()[0].isAssignableFrom(Map.class))) {
        setter=null;
      }
    }
    if (setter == null && !(target instanceof UserEvent)) {
      logger.warn("Unable to set property '" + entry.getKey() + "' to '"+ entry.getValue()+ "' on "+ target.getClass().getName()+ ": no setter. Please report at http://jira.reucon.org/browse/AJ");
    }
    if (setter == null) {
      continue;
    }
    dataType=setter.getParameterTypes()[0];
    if (dataType == Boolean.class) {
      value=AstUtil.isTrue(entry.getValue());
    }
 else     if (dataType.isAssignableFrom(String.class)) {
      value=entry.getValue();
      if (AstUtil.isNull(value)) {
        value=null;
      }
    }
 else     if (dataType.isAssignableFrom(Map.class)) {
      if (entry.getValue() instanceof List) {
        List<String> list=(List<String>)entry.getValue();
        value=buildMap(list.toArray(new String[list.size()]));
      }
 else       if (entry.getValue() instanceof String) {
        value=buildMap((String)entry.getValue());
      }
 else {
        value=null;
      }
    }
 else {
      try {
        Constructor constructor=dataType.getConstructor(new Class[]{String.class});
        value=constructor.newInstance(entry.getValue());
      }
 catch (      Exception e) {
        logger.error("Unable to convert value '" + entry.getValue() + "' of property '"+ entry.getKey()+ "' on "+ target.getClass().getName()+ " to required type "+ dataType,e);
        continue;
      }
    }
    try {
      setter.invoke(target,value);
    }
 catch (    Exception e) {
      logger.error("Unable to set property '" + entry.getKey() + "' to '"+ entry.getValue()+ "' on "+ target.getClass().getName(),e);
    }
  }
}

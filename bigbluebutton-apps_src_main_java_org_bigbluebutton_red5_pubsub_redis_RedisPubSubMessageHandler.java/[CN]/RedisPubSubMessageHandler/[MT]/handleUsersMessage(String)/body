{
  JsonParser parser=new JsonParser();
  JsonObject obj=(JsonObject)parser.parse(message);
  if (obj.has("header") && obj.has("payload")) {
    JsonObject header=(JsonObject)obj.get("header");
    if (header.has("name")) {
      String messageName=header.get("name").getAsString();
switch (messageName) {
case ValidateAuthTokenReplyMessage.VALIDATE_AUTH_TOKEN_REPLY:
        ValidateAuthTokenReplyMessage m=ValidateAuthTokenReplyMessage.fromJson(message);
      if (m != null) {
        processValidateAuthTokenReply(m);
      }
    break;
case ValidateAuthTokenTimeoutMessage.VALIDATE_AUTH_TOKEN_TIMEOUT:
  ValidateAuthTokenTimeoutMessage vattm=ValidateAuthTokenTimeoutMessage.fromJson(message);
if (vattm != null) {
  processValidateAuthTokenTimeoutMessage(vattm);
}
break;
case UserLeftMessage.USER_LEFT:
UserLeftMessage ulm=UserLeftMessage.fromJson(message);
if (ulm != null) {
processUserLeftMessage(ulm);
}
break;
case UserJoinedMessage.USER_JOINED:
UserJoinedMessage ujm=UserJoinedMessage.fromJson(message);
if (ujm != null) {
processUserJoinedMessage(ujm);
}
break;
case PresenterAssignedMessage.PRESENTER_ASSIGNED:
PresenterAssignedMessage pam=PresenterAssignedMessage.fromJson(message);
if (pam != null) {
processPresenterAssignedMessage(pam);
}
break;
case UserStatusChangedMessage.USER_STATUS_CHANGED:
UserStatusChangedMessage usm=UserStatusChangedMessage.fromJson(message);
if (usm != null) {
processUserStatusChangedMessage(usm);
}
break;
case UserRaisedHandMessage.USER_RAISED_HAND:
UserRaisedHandMessage urhm=UserRaisedHandMessage.fromJson(message);
if (urhm != null) {
processUserRaisedHandMessage(urhm);
}
break;
case UserLoweredHandMessage.USER_LOWERED_HAND:
UserLoweredHandMessage ulhm=UserLoweredHandMessage.fromJson(message);
if (ulhm != null) {
processUserLoweredHandMessage(ulhm);
}
break;
}
}
}
}

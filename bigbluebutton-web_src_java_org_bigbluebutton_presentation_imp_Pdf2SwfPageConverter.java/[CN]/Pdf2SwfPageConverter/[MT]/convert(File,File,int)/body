{
  String source=presentation.getAbsolutePath();
  String dest=output.getAbsolutePath();
  String AVM2SWF="-T9";
  NuProcessBuilder pb=new NuProcessBuilder(Arrays.asList("/bin/sh","-c",SWFTOOLS_DIR + File.separator + "pdf2swf"+ " -vv "+ AVM2SWF+ " -F "+ fontsDir+ " -p "+ String.valueOf(page)+ " "+ source+ " -o "+ dest+ " | egrep  'shape id|Updating font|Drawing' | sed 's/  / /g' | cut -d' ' -f 1-3  | sort | uniq -cw 15"));
  Pdf2SwfPageConverterHandler pHandler=new Pdf2SwfPageConverterHandler();
  pb.setProcessListener(pHandler);
  NuProcess process=pb.start();
  try {
    process.waitFor(60,TimeUnit.SECONDS);
  }
 catch (  InterruptedException e) {
    log.error(e.getMessage());
  }
  File destFile=new File(dest);
  if (pHandler.isConversionSuccessfull() && destFile.exists() && pHandler.numberOfPlacements() < placementsThreshold && pHandler.numberOfTextTags() < defineTextThreshold && pHandler.numberOfImageTags() < imageTagThreshold) {
    return true;
  }
 else {
    log.debug("Previous conversion generated {} PlaceObject tags, {} DefineText tags and {} Images. Flattening to png image before converting again to a swf.",pHandler.numberOfPlacements(),pHandler.numberOfTextTags(),pHandler.numberOfImageTags());
    File tempPdfPage=null;
    File tempPng=null;
    String basePresentationame=FilenameUtils.getBaseName(presentation.getName());
    try {
      tempPdfPage=File.createTempFile(basePresentationame + "-" + page,".pdf");
      tempPng=File.createTempFile(basePresentationame + "-" + page,".png");
    }
 catch (    IOException ioException) {
      log.error("Unable to create temporary files");
    }
    NuProcessBuilder pbPdf=new NuProcessBuilder(Arrays.asList(GHOSTSCRIPT_EXEC,"-sDEVICE=pdfwrite","-dNOPAUSE","-dQUIET","-dBATCH","-dFirstPage=" + page,"-dLastPage=" + page,"-sOutputFile=" + tempPdfPage.getAbsolutePath(),noPdfMarkWorkaround,presentation.getAbsolutePath()));
    NuAbstractProcessHandler pbPdfHandler=new NuAbstractProcessHandler(){
    }
;
    pbPdf.setProcessListener(pbPdfHandler);
    NuProcess processPdf=pbPdf.start();
    try {
      processPdf.waitFor(60,TimeUnit.SECONDS);
    }
 catch (    InterruptedException e) {
      log.error(e.getMessage());
    }
    NuProcessBuilder pbPng=new NuProcessBuilder(Arrays.asList(IMAGEMAGICK_DIR + File.separator + "convert","-density","150","-quality","90","-flatten","+dither","-depth","8",tempPdfPage.getAbsolutePath(),tempPng.getAbsolutePath()));
    Pdf2PngPageConverterHandler pbPngHandler=new Pdf2PngPageConverterHandler();
    pbPng.setProcessListener(pbPngHandler);
    NuProcess processPng=pbPng.start();
    try {
      processPng.waitFor(60,TimeUnit.SECONDS);
    }
 catch (    InterruptedException e) {
      log.error(e.getMessage());
    }
    source=tempPng.getAbsolutePath();
    NuProcessBuilder pbSwf=new NuProcessBuilder(Arrays.asList(SWFTOOLS_DIR + File.separator + "png2swf","-o",dest,source));
    Png2SwfPageConverterHandler pSwfHandler=new Png2SwfPageConverterHandler();
    pbSwf.setProcessListener(pSwfHandler);
    NuProcess processSwf=pbSwf.start();
    try {
      processSwf.waitFor(60,TimeUnit.SECONDS);
    }
 catch (    InterruptedException e) {
      log.error(e.getMessage());
    }
    tempPdfPage.delete();
    tempPng.delete();
    boolean doneSwf=pSwfHandler.isConversionSuccessfull();
    if (doneSwf && destFile.exists()) {
      return true;
    }
 else {
      log.warn("Failed to convert: " + destFile + " does not exist.");
      return false;
    }
  }
}
